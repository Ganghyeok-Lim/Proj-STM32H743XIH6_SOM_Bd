
STM32H743XIH6_SOM_Bd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d18  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d8  24000010  0800a054  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005e8  0800a054  000205e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ed08  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000030f8  00000000  00000000  0003ed89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001830  00000000  00000000  00041e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012e3  00000000  00000000  000436b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039f1d  00000000  00000000  0004499b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021050  00000000  00000000  0007e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170443  00000000  00000000  0009f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006984  00000000  00000000  0020fd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000c6  00000000  00000000  002166d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009f98 	.word	0x08009f98

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009f98 	.word	0x08009f98

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005da:	4b44      	ldr	r3, [pc, #272]	; (80006ec <main+0x118>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d11b      	bne.n	800061e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e6:	f3bf 8f4f 	dsb	sy
}
 80005ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
}
 80005f0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f2:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <main+0x118>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000600:	f3bf 8f6f 	isb	sy
}
 8000604:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000606:	4b39      	ldr	r3, [pc, #228]	; (80006ec <main+0x118>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a38      	ldr	r2, [pc, #224]	; (80006ec <main+0x118>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
}
 8000616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000618:	f3bf 8f6f 	isb	sy
}
 800061c:	e000      	b.n	8000620 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800061e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000620:	4b32      	ldr	r3, [pc, #200]	; (80006ec <main+0x118>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d138      	bne.n	800069e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <main+0x118>)
 800062e:	2200      	movs	r2, #0
 8000630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000634:	f3bf 8f4f 	dsb	sy
}
 8000638:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <main+0x118>)
 800063c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000640:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0b5b      	lsrs	r3, r3, #13
 8000646:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000654:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	015a      	lsls	r2, r3, #5
 800065a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000664:	4921      	ldr	r1, [pc, #132]	; (80006ec <main+0x118>)
 8000666:	4313      	orrs	r3, r2
 8000668:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1e5a      	subs	r2, r3, #1
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1ef      	bne.n	8000656 <main+0x82>
    } while(sets-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1e5      	bne.n	800064c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
}
 8000684:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <main+0x118>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <main+0x118>)
 800068c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000690:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000692:	f3bf 8f4f 	dsb	sy
}
 8000696:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
}
 800069c:	e000      	b.n	80006a0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800069e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f001 fc04 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f824 	bl	80006f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a8:	f000 f8da 	bl	8000860 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fc82 	bl	8000fb4 <MX_GPIO_Init>
  MX_DAC1_Init();
 80006b0:	f000 f8f6 	bl	80008a0 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80006b4:	f000 f930 	bl	8000918 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80006b8:	f000 f992 	bl	80009e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006bc:	f000 f9d0 	bl	8000a60 <MX_I2C2_Init>
  MX_I2C3_Init();
 80006c0:	f000 fa0e 	bl	8000ae0 <MX_I2C3_Init>
  MX_I2S2_Init();
 80006c4:	f000 fa4c 	bl	8000b60 <MX_I2S2_Init>
  MX_OPAMP1_Init();
 80006c8:	f000 fa7e 	bl	8000bc8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80006cc:	f000 fa9c 	bl	8000c08 <MX_OPAMP2_Init>
  MX_SDMMC1_SD_Init();
 80006d0:	f000 fabc 	bl	8000c4c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80006d4:	f000 fade 	bl	8000c94 <MX_SPI1_Init>
  MX_SPI4_Init();
 80006d8:	f000 fb32 	bl	8000d40 <MX_SPI4_Init>
  MX_UART8_Init();
 80006dc:	f000 fb86 	bl	8000dec <MX_UART8_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 fbd0 	bl	8000e84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 fc1a 	bl	8000f1c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x114>
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09e      	sub	sp, #120	; 0x78
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fa:	224c      	movs	r2, #76	; 0x4c
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f009 fc10 	bl	8009f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f009 fc09 	bl	8009f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000712:	2002      	movs	r0, #2
 8000714:	f002 ff06 	bl	8003524 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <SystemClock_Config+0x164>)
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	4a4c      	ldr	r2, [pc, #304]	; (8000854 <SystemClock_Config+0x164>)
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000728:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <SystemClock_Config+0x164>)
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b49      	ldr	r3, [pc, #292]	; (8000858 <SystemClock_Config+0x168>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a48      	ldr	r2, [pc, #288]	; (8000858 <SystemClock_Config+0x168>)
 8000738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b46      	ldr	r3, [pc, #280]	; (8000858 <SystemClock_Config+0x168>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074a:	bf00      	nop
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <SystemClock_Config+0x168>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000758:	d1f8      	bne.n	800074c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <SystemClock_Config+0x16c>)
 800075c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000760:	4a3e      	ldr	r2, [pc, #248]	; (800085c <SystemClock_Config+0x16c>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <SystemClock_Config+0x16c>)
 800076c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <SystemClock_Config+0x168>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <SystemClock_Config+0x168>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <SystemClock_Config+0x168>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <SystemClock_Config+0x164>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <SystemClock_Config+0x164>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <SystemClock_Config+0x164>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007aa:	bf00      	nop
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <SystemClock_Config+0x168>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b8:	d1f8      	bne.n	80007ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007ba:	2303      	movs	r3, #3
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d0:	2302      	movs	r3, #2
 80007d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007d8:	2350      	movs	r3, #80	; 0x50
 80007da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e8:	230c      	movs	r3, #12
 80007ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fecd 	bl	8003598 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000804:	f000 fc82 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	233f      	movs	r3, #63	; 0x3f
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000814:	2308      	movs	r3, #8
 8000816:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2104      	movs	r1, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fb0b 	bl	8003e4c <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x150>
  {
    Error_Handler();
 800083c:	f000 fc66 	bl	800110c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000844:	2100      	movs	r1, #0
 8000846:	2000      	movs	r0, #0
 8000848:	f003 fcb6 	bl	80041b8 <HAL_RCC_MCOConfig>
}
 800084c:	bf00      	nop
 800084e:	3778      	adds	r7, #120	; 0x78
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58000400 	.word	0x58000400
 8000858:	58024800 	.word	0x58024800
 800085c:	58024400 	.word	0x58024400

08000860 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0b0      	sub	sp, #192	; 0xc0
 8000864:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	22c0      	movs	r2, #192	; 0xc0
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f009 fb59 	bl	8009f24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 800087e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000882:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fed6 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 8000892:	f000 fc3b 	bl	800110c <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	37c0      	adds	r7, #192	; 0xc0
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2224      	movs	r2, #36	; 0x24
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f009 fb39 	bl	8009f24 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_DAC1_Init+0x70>)
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_DAC1_Init+0x74>)
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <MX_DAC1_Init+0x70>)
 80008ba:	f001 fc9c 	bl	80021f6 <HAL_DAC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008c4:	f000 fc22 	bl	800110c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	4619      	mov	r1, r3
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_DAC1_Init+0x70>)
 80008e4:	f001 fcaa 	bl	800223c <HAL_DAC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 fc0d 	bl	800110c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2210      	movs	r2, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_DAC1_Init+0x70>)
 80008fa:	f001 fc9f 	bl	800223c <HAL_DAC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 fc02 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2400002c 	.word	0x2400002c
 8000914:	40007400 	.word	0x40007400

08000918 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800091e:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <MX_FDCAN1_Init+0xc4>)
 8000920:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000942:	2210      	movs	r2, #16
 8000944:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000948:	2201      	movs	r2, #1
 800094a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800094e:	2202      	movs	r2, #2
 8000950:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000954:	2202      	movs	r2, #2
 8000956:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800095a:	2201      	movs	r2, #1
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000960:	2201      	movs	r2, #1
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000966:	2201      	movs	r2, #1
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800096c:	2201      	movs	r2, #1
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800098a:	2204      	movs	r2, #4
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 8000996:	2204      	movs	r2, #4
 8000998:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_FDCAN1_Init+0xc0>)
 80009c6:	f001 fd7b 	bl	80024c0 <HAL_FDCAN_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009d0:	f000 fb9c 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24000040 	.word	0x24000040
 80009dc:	4000a000 	.word	0x4000a000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f002 fa64 	bl	8002ee8 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fb71 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f002 faf7 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fb68 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f002 fb39 	bl	80030b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fb5f 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	240000e0 	.word	0x240000e0
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	307075b1 	.word	0x307075b1

08000a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C2_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C2_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a9c:	f002 fa24 	bl	8002ee8 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fb31 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000aae:	f002 fab7 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fb28 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000ac0:	f002 faf9 	bl	80030b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fb1f 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000134 	.word	0x24000134
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	307075b1 	.word	0x307075b1

08000ae0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_I2C3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_I2C3_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b1c:	f002 f9e4 	bl	8002ee8 <HAL_I2C_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 faf1 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b2e:	f002 fa77 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fae8 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b40:	f002 fab9 	bl	80030b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 fadf 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24000188 	.word	0x24000188
 8000b58:	40005c00 	.word	0x40005c00
 8000b5c:	307075b1 	.word	0x307075b1

08000b60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_I2S2_Init+0x64>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2S2_Init+0x60>)
 8000bac:	f002 fad0 	bl	8003150 <HAL_I2S_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bb6:	f000 faa9 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240001dc 	.word	0x240001dc
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000bce:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <MX_OPAMP1_Init+0x3c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_OPAMP1_Init+0x38>)
 8000bec:	f002 fbd2 	bl	8003394 <HAL_OPAMP_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 8000bf6:	f000 fa89 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000230 	.word	0x24000230
 8000c04:	40009000 	.word	0x40009000

08000c08 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <MX_OPAMP2_Init+0x40>)
 8000c10:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_OPAMP2_Init+0x3c>)
 8000c32:	f002 fbaf 	bl	8003394 <HAL_OPAMP_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_OPAMP2_Init+0x38>
  {
    Error_Handler();
 8000c3c:	f000 fa66 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24000264 	.word	0x24000264
 8000c48:	40009010 	.word	0x40009010

08000c4c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <MX_SDMMC1_SD_Init+0x44>)
 8000c54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c68:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c78:	f006 f9dc 	bl	8007034 <HAL_SD_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c82:	f000 fa43 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000298 	.word	0x24000298
 8000c90:	52007000 	.word	0x52007000

08000c94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000c9a:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <MX_SPI1_Init+0xa8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ca0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d24:	f007 f9f4 	bl	8008110 <HAL_SPI_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d2e:	f000 f9ed 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000314 	.word	0x24000314
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <MX_SPI4_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dd0:	f007 f99e 	bl	8008110 <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000dda:	f000 f997 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400039c 	.word	0x2400039c
 8000de8:	40013400 	.word	0x40013400

08000dec <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_UART8_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_UART8_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_UART8_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e36:	f007 faaa 	bl	800838e <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 f964 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e48:	f008 fab3 	bl	80093b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f000 f95b 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e5a:	f008 fae8 	bl	800942e <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f952 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e6a:	f008 fa69 	bl	8009340 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f94a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000424 	.word	0x24000424
 8000e80:	40007c00 	.word	0x40007c00

08000e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MX_USART1_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ece:	f007 fa5e 	bl	800838e <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 f918 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ee0:	f008 fa67 	bl	80093b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 f90f 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ef2:	f008 fa9c 	bl	800942e <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 f906 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000f02:	f008 fa1d 	bl	8009340 <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f8fe 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	240004b8 	.word	0x240004b8
 8000f18:	40011000 	.word	0x40011000

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <MX_USART2_UART_Init+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f66:	f007 fa12 	bl	800838e <HAL_UART_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 f8cc 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f78:	f008 fa1b 	bl	80093b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f000 f8c3 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f8a:	f008 fa50 	bl	800942e <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 f8ba 	bl	800110c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_USART2_UART_Init+0x90>)
 8000f9a:	f008 f9d1 	bl	8009340 <HAL_UARTEx_DisableFifoMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f000 f8b2 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2400054c 	.word	0x2400054c
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <MX_GPIO_Init+0x150>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <MX_GPIO_Init+0x150>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <MX_GPIO_Init+0x150>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <MX_GPIO_Init+0x150>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <MX_GPIO_Init+0x150>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <MX_GPIO_Init+0x150>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <MX_GPIO_Init+0x150>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a3d      	ldr	r2, [pc, #244]	; (8001104 <MX_GPIO_Init+0x150>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <MX_GPIO_Init+0x150>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_GPIO_Init+0x150>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	4a36      	ldr	r2, [pc, #216]	; (8001104 <MX_GPIO_Init+0x150>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <MX_GPIO_Init+0x150>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <MX_GPIO_Init+0x150>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <MX_GPIO_Init+0x150>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_GPIO_Init+0x150>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_GPIO_Init+0x150>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a27      	ldr	r2, [pc, #156]	; (8001104 <MX_GPIO_Init+0x150>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <MX_GPIO_Init+0x150>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_GPIO_Init+0x150>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <MX_GPIO_Init+0x150>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_GPIO_Init+0x150>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_GPIO_Init+0x150>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <MX_GPIO_Init+0x150>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0x150>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_GPIO_Init+0x150>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <MX_GPIO_Init+0x150>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_GPIO_Init+0x150>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : MCU_RCC_MCO1_Pin */
  GPIO_InitStruct.Pin = MCU_RCC_MCO1_Pin;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MCU_RCC_MCO1_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0x154>)
 80010f6:	f001 fd47 	bl	8002b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58024400 	.word	0x58024400
 8001108:	58020000 	.word	0x58020000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x30>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x30>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_DAC_MspInit+0x80>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d129      	bne.n	80011c2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 8001176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800117a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 8001180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = MCU_DAC1_OUT2_Pin|MCU_DAC1_OUT1_Pin;
 80011aa:	2330      	movs	r3, #48	; 0x30
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_DAC_MspInit+0x88>)
 80011be:	f001 fce3 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40007400 	.word	0x40007400
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020000 	.word	0x58020000

080011d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0bc      	sub	sp, #240	; 0xf0
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 fe93 	bl	8009f24 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <HAL_FDCAN_MspInit+0x114>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d16c      	bne.n	80012e2 <HAL_FDCAN_MspInit+0x10a>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fa09 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800122c:	f7ff ff6e 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001232:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001242:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_FDCAN_MspInit+0x118>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = MCU_FDCAN1_RX_Pin;
 800128a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012a4:	2309      	movs	r3, #9
 80012a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MCU_FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <HAL_FDCAN_MspInit+0x11c>)
 80012b2:	f001 fc69 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_FDCAN1_TX_Pin;
 80012b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012d0:	2309      	movs	r3, #9
 80012d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MCU_FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012da:	4619      	mov	r1, r3
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <HAL_FDCAN_MspInit+0x120>)
 80012de:	f001 fc53 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	37f0      	adds	r7, #240	; 0xf0
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	4000a000 	.word	0x4000a000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021c00 	.word	0x58021c00
 80012f8:	58020400 	.word	0x58020400

080012fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0be      	sub	sp, #248	; 0xf8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	22c0      	movs	r2, #192	; 0xc0
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f008 fe01 	bl	8009f24 <memset>
  if(hi2c->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a73      	ldr	r2, [pc, #460]	; (80014f4 <HAL_I2C_MspInit+0x1f8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d146      	bne.n	80013ba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132c:	f04f 0208 	mov.w	r2, #8
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f003 f978 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800134e:	f7ff fedd 	bl	800110c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C1_SCL_Pin|MCU_I2C1_SDA_Pin;
 8001370:	23c0      	movs	r3, #192	; 0xc0
 8001372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001376:	2312      	movs	r3, #18
 8001378:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001388:	2304      	movs	r3, #4
 800138a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001392:	4619      	mov	r1, r3
 8001394:	4859      	ldr	r0, [pc, #356]	; (80014fc <HAL_I2C_MspInit+0x200>)
 8001396:	f001 fbf7 	bl	8002b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 800139c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013b8:	e097      	b.n	80014ea <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_I2C_MspInit+0x204>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d146      	bne.n	8001452 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013c4:	f04f 0208 	mov.w	r2, #8
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f92c 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80013e6:	f7ff fe91 	bl	800110c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	4a41      	ldr	r2, [pc, #260]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80013f2:	f043 0320 	orr.w	r3, r3, #32
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCU_I2C2_SCL_Pin|MCU_I2C2_SDA_Pin;
 8001408:	2303      	movs	r3, #3
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001420:	2304      	movs	r3, #4
 8001422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001426:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800142a:	4619      	mov	r1, r3
 800142c:	4835      	ldr	r0, [pc, #212]	; (8001504 <HAL_I2C_MspInit+0x208>)
 800142e:	f001 fbab 	bl	8002b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001438:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 800143a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
}
 8001450:	e04b      	b.n	80014ea <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <HAL_I2C_MspInit+0x20c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d146      	bne.n	80014ea <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800145c:	f04f 0208 	mov.w	r2, #8
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f8e0 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 800147e:	f7ff fe45 	bl	800110c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 800148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_I2C3_SDA_Pin|MCU_I2C3_SCL_Pin;
 80014a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014ba:	2304      	movs	r3, #4
 80014bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <HAL_I2C_MspInit+0x210>)
 80014c8:	f001 fb5e 	bl	8002b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80014ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80014d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_I2C_MspInit+0x1fc>)
 80014de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
}
 80014ea:	bf00      	nop
 80014ec:	37f8      	adds	r7, #248	; 0xf8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40005400 	.word	0x40005400
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020400 	.word	0x58020400
 8001500:	40005800 	.word	0x40005800
 8001504:	58021400 	.word	0x58021400
 8001508:	40005c00 	.word	0x40005c00
 800150c:	58021c00 	.word	0x58021c00

08001510 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0bc      	sub	sp, #240	; 0xf0
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	22c0      	movs	r2, #192	; 0xc0
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f008 fcf7 	bl	8009f24 <memset>
  if(hi2s->Instance==SPI2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <HAL_I2S_MspInit+0x10c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d169      	bne.n	8001614 <HAL_I2S_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800154c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001550:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f86e 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001562:	f7ff fdd3 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_I2S_MspInit+0x110>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800156c:	4a2c      	ldr	r2, [pc, #176]	; (8001620 <HAL_I2S_MspInit+0x110>)
 800156e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_I2S_MspInit+0x110>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_I2S_MspInit+0x110>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_I2S_MspInit+0x110>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_I2S_MspInit+0x110>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_I2S_MspInit+0x110>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_I2S_MspInit+0x110>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_I2S_MspInit+0x110>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> I2S2_WS
    PI2     ------> I2S2_SDI
    PI3     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = MCU_I2S2_CK_Pin|MCU_I2S2_WS_Pin|MCU_I2S2_SDI_Pin|MCU_I2S2_SDO_Pin;
 80015c0:	230f      	movs	r3, #15
 80015c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015d8:	2305      	movs	r3, #5
 80015da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e2:	4619      	mov	r1, r3
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <HAL_I2S_MspInit+0x114>)
 80015e6:	f001 facf 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_I2S2_MCK_Pin;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001602:	2305      	movs	r3, #5
 8001604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MCU_I2S2_MCK_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <HAL_I2S_MspInit+0x118>)
 8001610:	f001 faba 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	37f0      	adds	r7, #240	; 0xf0
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40003800 	.word	0x40003800
 8001620:	58024400 	.word	0x58024400
 8001624:	58022000 	.word	0x58022000
 8001628:	58020800 	.word	0x58020800

0800162c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_OPAMP_MspInit+0x170>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d169      	bne.n	8001722 <HAL_OPAMP_MspInit+0xf6>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800164e:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 8001656:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10e      	bne.n	800167e <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001662:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001672:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a40      	ldr	r2, [pc, #256]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINM
    PC4     ------> OPAMP1_VOUT
    PB0     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = MCU_OPAMP1_VINM_Pin;
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCU_OPAMP1_VINM_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	482f      	ldr	r0, [pc, #188]	; (80017a8 <HAL_OPAMP_MspInit+0x17c>)
 80016ec:	f001 fa4c 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_OPAMP1_VOUT_Pin;
 80016f0:	2310      	movs	r3, #16
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f4:	2303      	movs	r3, #3
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCU_OPAMP1_VOUT_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	482a      	ldr	r0, [pc, #168]	; (80017ac <HAL_OPAMP_MspInit+0x180>)
 8001704:	f001 fa40 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_OPAMP1_VINP_Pin;
 8001708:	2301      	movs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCU_OPAMP1_VINP_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4825      	ldr	r0, [pc, #148]	; (80017b0 <HAL_OPAMP_MspInit+0x184>)
 800171c:	f001 fa34 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8001720:	e038      	b.n	8001794 <HAL_OPAMP_MspInit+0x168>
  else if(hopamp->Instance==OPAMP2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <HAL_OPAMP_MspInit+0x188>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d133      	bne.n	8001794 <HAL_OPAMP_MspInit+0x168>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 8001734:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_OPAMP_MspInit+0x174>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d10e      	bne.n	800175c <HAL_OPAMP_MspInit+0x130>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001740:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001750:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_OPAMP_MspInit+0x178>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_OPAMP2_VINP_Pin|MCU_OPAMP2_VINM_Pin|MCU_OPAMP2_VOUT_Pin;
 800177a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001780:	2303      	movs	r3, #3
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	480a      	ldr	r0, [pc, #40]	; (80017b8 <HAL_OPAMP_MspInit+0x18c>)
 8001790:	f001 f9fa 	bl	8002b88 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40009000 	.word	0x40009000
 80017a0:	240005e0 	.word	0x240005e0
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58020000 	.word	0x58020000
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58020400 	.word	0x58020400
 80017b4:	40009010 	.word	0x40009010
 80017b8:	58021000 	.word	0x58021000

080017bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0bc      	sub	sp, #240	; 0xf0
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	22c0      	movs	r2, #192	; 0xc0
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 fba1 	bl	8009f24 <memset>
  if(hsd->Instance==SDMMC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <HAL_SD_MspInit+0x10c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d169      	bne.n	80018c0 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80017ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	4618      	mov	r0, r3
 8001802:	f002 ff19 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800180c:	f7ff fc7e 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001822:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_SD_MspInit+0x110>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_SD_MspInit+0x110>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_SD_MspInit+0x110>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = MCU_SDMMC1_D2_Pin|MCU_SDMMC1_D3_Pin|MCU_SDMMC1_CK_Pin|MCU_SDMMC1_D0_Pin
 800186a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |MCU_SDMMC1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001884:	230c      	movs	r3, #12
 8001886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188e:	4619      	mov	r1, r3
 8001890:	480f      	ldr	r0, [pc, #60]	; (80018d0 <HAL_SD_MspInit+0x114>)
 8001892:	f001 f979 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_SDMMC1_CMD_Pin;
 8001896:	2304      	movs	r3, #4
 8001898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018ae:	230c      	movs	r3, #12
 80018b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MCU_SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_SD_MspInit+0x118>)
 80018bc:	f001 f964 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	37f0      	adds	r7, #240	; 0xf0
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	52007000 	.word	0x52007000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020800 	.word	0x58020800
 80018d4:	58020c00 	.word	0x58020c00

080018d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0be      	sub	sp, #248	; 0xf8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	22c0      	movs	r2, #192	; 0xc0
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f008 fb13 	bl	8009f24 <memset>
  if(hspi->Instance==SPI1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_SPI_MspInit+0x1a8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d16c      	bne.n	80019e2 <HAL_SPI_MspInit+0x10a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fe89 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800192c:	f7ff fbee 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001930:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001936:	4a53      	ldr	r2, [pc, #332]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001940:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800196c:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a44      	ldr	r2, [pc, #272]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MCU_SPI1_MOSI_Pin;
 800198a:	2320      	movs	r3, #32
 800198c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a2:	2305      	movs	r3, #5
 80019a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(MCU_SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4836      	ldr	r0, [pc, #216]	; (8001a88 <HAL_SPI_MspInit+0x1b0>)
 80019b0:	f001 f8ea 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCU_SPI1_MISO_Pin|MCU_SPI1_SCK_Pin;
 80019b4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019d8:	4619      	mov	r1, r3
 80019da:	482c      	ldr	r0, [pc, #176]	; (8001a8c <HAL_SPI_MspInit+0x1b4>)
 80019dc:	f001 f8d4 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80019e0:	e04a      	b.n	8001a78 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2a      	ldr	r2, [pc, #168]	; (8001a90 <HAL_SPI_MspInit+0x1b8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d145      	bne.n	8001a78 <HAL_SPI_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80019ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fe18 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001a0e:	f7ff fb7d 	bl	800110c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a18:	4a1a      	ldr	r2, [pc, #104]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_SPI_MspInit+0x1ac>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_SPI4_SCK_Pin|MCU_SPI4_MISO_Pin|MCU_SPI4_MOSI_Pin;
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a66:	2305      	movs	r3, #5
 8001a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <HAL_SPI_MspInit+0x1bc>)
 8001a74:	f001 f888 	bl	8002b88 <HAL_GPIO_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	37f8      	adds	r7, #248	; 0xf8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013000 	.word	0x40013000
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58020400 	.word	0x58020400
 8001a8c:	58021800 	.word	0x58021800
 8001a90:	40013400 	.word	0x40013400
 8001a94:	58021000 	.word	0x58021000

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0c0      	sub	sp, #256	; 0x100
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	22c0      	movs	r2, #192	; 0xc0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 fa33 	bl	8009f24 <memset>
  if(huart->Instance==UART8)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a85      	ldr	r2, [pc, #532]	; (8001cd8 <HAL_UART_MspInit+0x240>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d146      	bne.n	8001b56 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001ac8:	f04f 0202 	mov.w	r2, #2
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fdaa 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001aea:	f7ff fb0f 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = MCU_UART8_TX_Pin|MCU_UART8_RX_Pin;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001b42:	2308      	movs	r3, #8
 8001b44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4864      	ldr	r0, [pc, #400]	; (8001ce0 <HAL_UART_MspInit+0x248>)
 8001b50:	f001 f81a 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b54:	e0bb      	b.n	8001cce <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <HAL_UART_MspInit+0x24c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d147      	bne.n	8001bf0 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b60:	f04f 0201 	mov.w	r2, #1
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fd5e 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001b82:	f7ff fac3 	bl	800110c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b86:	4b55      	ldr	r3, [pc, #340]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b8c:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART1_RX_Pin|MCU_USART1_TX_Pin;
 8001bc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001be6:	4619      	mov	r1, r3
 8001be8:	483f      	ldr	r0, [pc, #252]	; (8001ce8 <HAL_UART_MspInit+0x250>)
 8001bea:	f000 ffcd 	bl	8002b88 <HAL_GPIO_Init>
}
 8001bee:	e06e      	b.n	8001cce <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <HAL_UART_MspInit+0x254>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d169      	bne.n	8001cce <HAL_UART_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bfa:	f04f 0202 	mov.w	r2, #2
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fd11 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001c1c:	f7ff fa76 	bl	800110c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c26:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_UART_MspInit+0x244>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c92:	2307      	movs	r3, #7
 8001c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(MCU_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <HAL_UART_MspInit+0x258>)
 8001ca0:	f000 ff72 	bl	8002b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_USART2_RX_Pin;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(MCU_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <HAL_UART_MspInit+0x250>)
 8001cca:	f000 ff5d 	bl	8002b88 <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40007c00 	.word	0x40007c00
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58021000 	.word	0x58021000
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	58020000 	.word	0x58020000
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	58020c00 	.word	0x58020c00

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d40:	f000 f926 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <SystemInit+0xe4>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <SystemInit+0xe4>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <SystemInit+0xe8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d807      	bhi.n	8001d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <SystemInit+0xe8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 030f 	bic.w	r3, r3, #15
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <SystemInit+0xe8>)
 8001d72:	f043 0307 	orr.w	r3, r3, #7
 8001d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <SystemInit+0xec>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <SystemInit+0xec>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <SystemInit+0xec>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <SystemInit+0xec>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4929      	ldr	r1, [pc, #164]	; (8001e34 <SystemInit+0xec>)
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <SystemInit+0xf0>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <SystemInit+0xe8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <SystemInit+0xe8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <SystemInit+0xe8>)
 8001dac:	f043 0307 	orr.w	r3, r3, #7
 8001db0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <SystemInit+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <SystemInit+0xec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <SystemInit+0xec>)
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <SystemInit+0xf4>)
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <SystemInit+0xec>)
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <SystemInit+0xf8>)
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <SystemInit+0xec>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SystemInit+0xfc>)
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <SystemInit+0xec>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <SystemInit+0xec>)
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <SystemInit+0xfc>)
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <SystemInit+0xec>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <SystemInit+0xec>)
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <SystemInit+0xfc>)
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <SystemInit+0xec>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <SystemInit+0xec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <SystemInit+0xec>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <SystemInit+0xec>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <SystemInit+0x100>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <SystemInit+0x104>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e12:	d202      	bcs.n	8001e1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <SystemInit+0x108>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <SystemInit+0x10c>)
 8001e1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00
 8001e30:	52002000 	.word	0x52002000
 8001e34:	58024400 	.word	0x58024400
 8001e38:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e3c:	02020200 	.word	0x02020200
 8001e40:	01ff0000 	.word	0x01ff0000
 8001e44:	01010280 	.word	0x01010280
 8001e48:	5c001000 	.word	0x5c001000
 8001e4c:	ffff0000 	.word	0xffff0000
 8001e50:	51008108 	.word	0x51008108
 8001e54:	52004000 	.word	0x52004000

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f7ff ff74 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e86:	f008 f855 	bl	8009f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe fba3 	bl	80005d4 <main>
  bx  lr
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001e9c:	0800a044 	.word	0x0800a044
  ldr r2, =_sbss
 8001ea0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ea4:	240005e8 	.word	0x240005e8

08001ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC3_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f000 f96e 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb8:	f002 f9e8 	bl	800428c <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_Init+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4913      	ldr	r1, [pc, #76]	; (8001f18 <HAL_Init+0x6c>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_Init+0x68>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_Init+0x6c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_Init+0x70>)
 8001eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_Init+0x74>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f000 f814 	bl	8001f24 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e002      	b.n	8001f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f06:	f7ff f907 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58024400 	.word	0x58024400
 8001f18:	08009ffc 	.word	0x08009ffc
 8001f1c:	24000004 	.word	0x24000004
 8001f20:	24000000 	.word	0x24000000

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_InitTick+0x60>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e021      	b.n	8001f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_InitTick+0x64>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_InitTick+0x60>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f945 	bl	80021de <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f91d 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x68>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2400000c 	.word	0x2400000c
 8001f88:	24000000 	.word	0x24000000
 8001f8c:	24000008 	.word	0x24000008

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2400000c 	.word	0x2400000c
 8001fb4:	240005e4 	.word	0x240005e4

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	240005e4 	.word	0x240005e4

08001fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff ffee 	bl	8001fb8 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_Delay+0x44>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff6:	bf00      	nop
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2400000c 	.word	0x2400000c

08002018 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetREVID+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0c1b      	lsrs	r3, r3, #16
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	5c001000 	.word	0x5c001000

08002030 <__NVIC_SetPriorityGrouping>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <__NVIC_SetPriorityGrouping+0x40>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	4313      	orrs	r3, r2
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x40>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	05fa0000 	.word	0x05fa0000

08002078 <__NVIC_GetPriorityGrouping>:
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_SetPriority>:
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff47 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff5e 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff90 	bl	80020e8 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5f 	bl	8002094 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffb2 	bl	8002150 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e014      	b.n	8002232 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe ff97 	bl	800114c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_DAC_ConfigChannel+0x1e>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e12a      	b.n	80024b4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	795b      	ldrb	r3, [r3, #5]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_DAC_ConfigChannel+0x2e>
 8002266:	2302      	movs	r3, #2
 8002268:	e124      	b.n	80024b4 <HAL_DAC_ConfigChannel+0x278>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2202      	movs	r2, #2
 8002274:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d17a      	bne.n	8002374 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800227e:	f7ff fe9b 	bl	8001fb8 <HAL_GetTick>
 8002282:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13d      	bne.n	8002306 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800228a:	e018      	b.n	80022be <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800228c:	f7ff fe94 	bl	8001fb8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d911      	bls.n	80022be <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a0:	4b86      	ldr	r3, [pc, #536]	; (80024bc <HAL_DAC_ConfigChannel+0x280>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f043 0208 	orr.w	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2203      	movs	r2, #3
 80022b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0fa      	b.n	80024b4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c4:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_DAC_ConfigChannel+0x280>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1df      	bne.n	800228c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	6992      	ldr	r2, [r2, #24]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
 80022d6:	e020      	b.n	800231a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022d8:	f7ff fe6e 	bl	8001fb8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d90f      	bls.n	8002306 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0a      	bge.n	8002306 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f043 0208 	orr.w	r2, r3, #8
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2203      	movs	r2, #3
 8002300:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0d6      	b.n	80024b4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	2b00      	cmp	r3, #0
 800230e:	dbe3      	blt.n	80022d8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	6992      	ldr	r2, [r2, #24]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	ea02 0103 	and.w	r1, r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	21ff      	movs	r1, #255	; 0xff
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	ea02 0103 	and.w	r1, r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d11d      	bne.n	80023b8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2207      	movs	r2, #7
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
 80023e0:	e00f      	b.n	8002402 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d102      	bne.n	80023f0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	e008      	b.n	8002402 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	e001      	b.n	8002402 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4313      	orrs	r3, r2
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	f640 72fe 	movw	r2, #4094	; 0xffe
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	22c0      	movs	r2, #192	; 0xc0
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80024b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20008000 	.word	0x20008000

080024c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b098      	sub	sp, #96	; 0x60
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80024c8:	4a84      	ldr	r2, [pc, #528]	; (80026dc <HAL_FDCAN_Init+0x21c>)
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4611      	mov	r1, r2
 80024d0:	224c      	movs	r2, #76	; 0x4c
 80024d2:	4618      	mov	r0, r3
 80024d4:	f007 fd52 	bl	8009f7c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1c6      	b.n	8002870 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7e      	ldr	r2, [pc, #504]	; (80026e0 <HAL_FDCAN_Init+0x220>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d106      	bne.n	80024fa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fe62 	bl	80011d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0210 	bic.w	r2, r2, #16
 8002522:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002524:	f7ff fd48 	bl	8001fb8 <HAL_GetTick>
 8002528:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800252a:	e014      	b.n	8002556 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800252c:	f7ff fd44 	bl	8001fb8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b0a      	cmp	r3, #10
 8002538:	d90d      	bls.n	8002556 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2203      	movs	r2, #3
 800254e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e18c      	b.n	8002870 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d0e3      	beq.n	800252c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002574:	f7ff fd20 	bl	8001fb8 <HAL_GetTick>
 8002578:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800257a:	e014      	b.n	80025a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800257c:	f7ff fd1c 	bl	8001fb8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d90d      	bls.n	80025a6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e164      	b.n	8002870 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0e3      	beq.n	800257c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0202 	orr.w	r2, r2, #2
 80025c2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7c1b      	ldrb	r3, [r3, #16]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	e007      	b.n	80025ee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7c5b      	ldrb	r3, [r3, #17]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	e007      	b.n	8002618 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002616:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7c9b      	ldrb	r3, [r3, #18]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d108      	bne.n	8002632 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800262e:	619a      	str	r2, [r3, #24]
 8002630:	e007      	b.n	8002642 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002640:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002666:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0210 	bic.w	r2, r2, #16
 8002676:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0204 	orr.w	r2, r2, #4
 800268e:	619a      	str	r2, [r3, #24]
 8002690:	e030      	b.n	80026f4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02c      	beq.n	80026f4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d020      	beq.n	80026e4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0210 	orr.w	r2, r2, #16
 80026c0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d114      	bne.n	80026f4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	619a      	str	r2, [r3, #24]
 80026da:	e00b      	b.n	80026f4 <HAL_FDCAN_Init+0x234>
 80026dc:	08009fb0 	.word	0x08009fb0
 80026e0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0220 	orr.w	r2, r2, #32
 80026f2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	3b01      	subs	r3, #1
 8002702:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002704:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800270c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	3b01      	subs	r3, #1
 8002716:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800271c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800271e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002728:	d115      	bne.n	8002756 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	3b01      	subs	r3, #1
 8002736:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002738:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	3b01      	subs	r3, #1
 8002740:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002742:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	3b01      	subs	r3, #1
 800274c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002752:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002754:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	4413      	add	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d011      	beq.n	80027a6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800278a:	f023 0107 	bic.w	r1, r3, #7
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	443b      	add	r3, r7
 8002798:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d011      	beq.n	80027d2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027b6:	f023 0107 	bic.w	r1, r3, #7
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	443b      	add	r3, r7
 80027c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	443b      	add	r3, r7
 80027f0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80027f4:	011a      	lsls	r2, r3, #4
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002810:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	3360      	adds	r3, #96	; 0x60
 800281c:	443b      	add	r3, r7
 800281e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002822:	021a      	lsls	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_FDCAN_Init+0x3b8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d107      	bne.n	8002848 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f022 0203 	bic.w	r2, r2, #3
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f80b 	bl	800287c <FDCAN_CalcultateRamBlockAddresses>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800286c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002870:	4618      	mov	r0, r3
 8002872:	3760      	adds	r7, #96	; 0x60
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	4000a000 	.word	0x4000a000

0800287c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002892:	4ba7      	ldr	r3, [pc, #668]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002894:	4013      	ands	r3, r2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	0091      	lsls	r1, r2, #2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	430b      	orrs	r3, r1
 80028a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	4413      	add	r3, r2
 80028c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028d2:	4b97      	ldr	r3, [pc, #604]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	0091      	lsls	r1, r2, #2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	430b      	orrs	r3, r1
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002914:	4b86      	ldr	r3, [pc, #536]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002916:	4013      	ands	r3, r2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	0091      	lsls	r1, r2, #2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800292e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	041a      	lsls	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295c:	4b74      	ldr	r3, [pc, #464]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800295e:	4013      	ands	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	0091      	lsls	r1, r2, #2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002976:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	041a      	lsls	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80029a4:	4b62      	ldr	r3, [pc, #392]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	0091      	lsls	r1, r2, #2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4413      	add	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	0091      	lsls	r1, r2, #2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4413      	add	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	0091      	lsls	r1, r2, #2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a2c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a48:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	061a      	lsls	r2, r3, #24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002a62:	4413      	add	r3, r2
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002a9c:	441a      	add	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d915      	bls.n	8002b58 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002b2c:	e006      	b.n	8002b3c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002b2e:	bf00      	nop
 8002b30:	ffff0003 	.word	0xffff0003
 8002b34:	10002b00 	.word	0x10002b00
 8002b38:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e010      	b.n	8002b7a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e005      	b.n	8002b6c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3f3      	bcc.n	8002b60 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_GPIO_Init+0x234>)
 8002b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b9a:	e194      	b.n	8002ec6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8186 	beq.w	8002ec0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d005      	beq.n	8002bcc <HAL_GPIO_Init+0x44>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d130      	bne.n	8002c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c02:	2201      	movs	r2, #1
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 0201 	and.w	r2, r3, #1
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d017      	beq.n	8002c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d123      	bne.n	8002cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	08da      	lsrs	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3208      	adds	r2, #8
 8002c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	08da      	lsrs	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3208      	adds	r2, #8
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0203 	and.w	r2, r3, #3
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80e0 	beq.w	8002ec0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_GPIO_Init+0x238>)
 8002d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_GPIO_Init+0x238>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_GPIO_Init+0x238>)
 8002d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_GPIO_Init+0x23c>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <HAL_GPIO_Init+0x240>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d052      	beq.n	8002df0 <HAL_GPIO_Init+0x268>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_GPIO_Init+0x244>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d031      	beq.n	8002db6 <HAL_GPIO_Init+0x22e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_GPIO_Init+0x248>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02b      	beq.n	8002db2 <HAL_GPIO_Init+0x22a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_GPIO_Init+0x24c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d025      	beq.n	8002dae <HAL_GPIO_Init+0x226>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_GPIO_Init+0x250>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01f      	beq.n	8002daa <HAL_GPIO_Init+0x222>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_GPIO_Init+0x254>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d019      	beq.n	8002da6 <HAL_GPIO_Init+0x21e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_GPIO_Init+0x258>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_GPIO_Init+0x25c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_GPIO_Init+0x260>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a17      	ldr	r2, [pc, #92]	; (8002dec <HAL_GPIO_Init+0x264>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x20e>
 8002d92:	2309      	movs	r3, #9
 8002d94:	e02d      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002d96:	230a      	movs	r3, #10
 8002d98:	e02b      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e029      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e027      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e025      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e023      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e021      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e01f      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e01d      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01b      	b.n	8002df2 <HAL_GPIO_Init+0x26a>
 8002dba:	bf00      	nop
 8002dbc:	58000080 	.word	0x58000080
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58000400 	.word	0x58000400
 8002dc8:	58020000 	.word	0x58020000
 8002dcc:	58020400 	.word	0x58020400
 8002dd0:	58020800 	.word	0x58020800
 8002dd4:	58020c00 	.word	0x58020c00
 8002dd8:	58021000 	.word	0x58021000
 8002ddc:	58021400 	.word	0x58021400
 8002de0:	58021800 	.word	0x58021800
 8002de4:	58021c00 	.word	0x58021c00
 8002de8:	58022000 	.word	0x58022000
 8002dec:	58022400 	.word	0x58022400
 8002df0:	2300      	movs	r3, #0
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	f002 0203 	and.w	r2, r2, #3
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	4093      	lsls	r3, r2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e02:	4938      	ldr	r1, [pc, #224]	; (8002ee4 <HAL_GPIO_Init+0x35c>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f47f ae63 	bne.w	8002b9c <HAL_GPIO_Init+0x14>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	3724      	adds	r7, #36	; 0x24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	58000400 	.word	0x58000400

08002ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e08b      	b.n	8003012 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe f9f4 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e006      	b.n	8002f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d108      	bne.n	8002f8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e007      	b.n	8002f9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_I2C_Init+0x134>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69d9      	ldr	r1, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	02008000 	.word	0x02008000

08003020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d138      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e032      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d139      	bne.n	8003140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e033      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e10d      	b.n	800337e <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe f9ca 	bl	8001510 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d008      	beq.n	80031c4 <HAL_I2S_Init+0x74>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d004      	beq.n	80031c4 <HAL_I2S_Init+0x74>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	f040 8087 	bne.w	80032d2 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d05a      	beq.n	8003282 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80031d4:	2302      	movs	r3, #2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e001      	b.n	80031de <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80031da:	2301      	movs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b30      	cmp	r3, #48	; 0x30
 80031e4:	d003      	beq.n	80031ee <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80031ea:	2bb0      	cmp	r3, #176	; 0xb0
 80031ec:	d102      	bne.n	80031f4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e001      	b.n	80031f8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80031f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	f002 fc24 	bl	8005a4c <HAL_RCCEx_GetPeriphCLKFreq>
 8003204:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320e:	d113      	bne.n	8003238 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	461a      	mov	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	3305      	adds	r3, #5
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e014      	b.n	8003262 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003238:	2220      	movs	r2, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	461a      	mov	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	3305      	adds	r3, #5
 8003260:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4a48      	ldr	r2, [pc, #288]	; (8003388 <HAL_I2S_Init+0x238>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	08db      	lsrs	r3, r3, #3
 800326c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e003      	b.n	800328a <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003282:	2302      	movs	r3, #2
 8003284:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_I2S_Init+0x146>
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d002      	beq.n	800329c <HAL_I2S_Init+0x14c>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2bff      	cmp	r3, #255	; 0xff
 800329a:	d907      	bls.n	80032ac <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e068      	b.n	800337e <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032bc:	4b33      	ldr	r3, [pc, #204]	; (800338c <HAL_I2S_Init+0x23c>)
 80032be:	4013      	ands	r3, r2
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	0411      	lsls	r1, r2, #16
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	0612      	lsls	r2, r2, #24
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_I2S_Init+0x240>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6851      	ldr	r1, [r2, #4]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6892      	ldr	r2, [r2, #8]
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6992      	ldr	r2, [r2, #24]
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6a12      	ldr	r2, [r2, #32]
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6912      	ldr	r2, [r2, #16]
 8003302:	430a      	orrs	r2, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f640 72f8 	movw	r2, #4088	; 0xff8
 8003318:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003328:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d007      	beq.n	8003358 <HAL_I2S_Init+0x208>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d003      	beq.n	8003358 <HAL_I2S_Init+0x208>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b0a      	cmp	r3, #10
 8003356:	d10a      	bne.n	800336e <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	cccccccd 	.word	0xcccccccd
 800338c:	fe00ffff 	.word	0xfe00ffff
 8003390:	fdff9040 	.word	0xfdff9040

08003394 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0b1      	b.n	800350e <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d101      	bne.n	80033ba <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0a9      	b.n	800350e <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d101      	bne.n	80033ca <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a1      	b.n	800350e <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f920 	bl	800162c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d119      	bne.n	8003438 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_OPAMP_Init+0x184>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6851      	ldr	r1, [r2, #4]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6952      	ldr	r2, [r2, #20]
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6992      	ldr	r2, [r2, #24]
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6912      	ldr	r2, [r2, #16]
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69d2      	ldr	r2, [r2, #28]
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d113      	bne.n	8003468 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <HAL_OPAMP_Init+0x188>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6851      	ldr	r1, [r2, #4]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6892      	ldr	r2, [r2, #8]
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6912      	ldr	r2, [r2, #16]
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	69d2      	ldr	r2, [r2, #28]
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_OPAMP_Init+0x188>)
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6851      	ldr	r1, [r2, #4]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	69d2      	ldr	r2, [r2, #28]
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	430b      	orrs	r3, r1
 800349c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a6:	d127      	bne.n	80034f8 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b0:	d011      	beq.n	80034d6 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_OPAMP_Init+0x18c>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	e010      	b.n	80034f8 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_OPAMP_Init+0x18c>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	fff83e93 	.word	0xfff83e93
 800351c:	fffbfe93 	.word	0xfffbfe93
 8003520:	ffffe0e0 	.word	0xffffe0e0

08003524 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_PWREx_ConfigSupply+0x70>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d00a      	beq.n	800354e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_PWREx_ConfigSupply+0x70>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e01f      	b.n	800358a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e01d      	b.n	800358a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_PWREx_ConfigSupply+0x70>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 0207 	bic.w	r2, r3, #7
 8003556:	490f      	ldr	r1, [pc, #60]	; (8003594 <HAL_PWREx_ConfigSupply+0x70>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800355e:	f7fe fd2b 	bl	8001fb8 <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003564:	e009      	b.n	800357a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003566:	f7fe fd27 	bl	8001fb8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003574:	d901      	bls.n	800357a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e007      	b.n	800358a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_PWREx_ConfigSupply+0x70>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003586:	d1ee      	bne.n	8003566 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58024800 	.word	0x58024800

08003598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f000 bc48 	b.w	8003e3c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8088 	beq.w	80036ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ba:	4b99      	ldr	r3, [pc, #612]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035c4:	4b96      	ldr	r3, [pc, #600]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d007      	beq.n	80035e0 <HAL_RCC_OscConfig+0x48>
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	2b18      	cmp	r3, #24
 80035d4:	d111      	bne.n	80035fa <HAL_RCC_OscConfig+0x62>
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d06d      	beq.n	80036c8 <HAL_RCC_OscConfig+0x130>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d169      	bne.n	80036c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f000 bc21 	b.w	8003e3c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x7a>
 8003604:	4b86      	ldr	r3, [pc, #536]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a85      	ldr	r2, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e02e      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x9c>
 800361a:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a80      	ldr	r2, [pc, #512]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b7e      	ldr	r3, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7d      	ldr	r2, [pc, #500]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800362c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e01d      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0xc0>
 800363e:	4b78      	ldr	r3, [pc, #480]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b75      	ldr	r3, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a74      	ldr	r2, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003658:	4b71      	ldr	r3, [pc, #452]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a70      	ldr	r2, [pc, #448]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6d      	ldr	r2, [pc, #436]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fc9e 	bl	8001fb8 <HAL_GetTick>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe fc9a 	bl	8001fb8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e3d4      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fc8a 	bl	8001fb8 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fc86 	bl	8001fb8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e3c0      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ba:	4b59      	ldr	r3, [pc, #356]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x110>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80ca 	beq.w	800386c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d8:	4b51      	ldr	r3, [pc, #324]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_RCC_OscConfig+0x166>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	2b18      	cmp	r3, #24
 80036f2:	d156      	bne.n	80037a2 <HAL_RCC_OscConfig+0x20a>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d151      	bne.n	80037a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fe:	4b48      	ldr	r3, [pc, #288]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x17e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e392      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0219 	bic.w	r2, r3, #25
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	493f      	ldr	r1, [pc, #252]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fc46 	bl	8001fb8 <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fe fc42 	bl	8001fb8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e37c      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003742:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	f7fe fc63 	bl	8002018 <HAL_GetREVID>
 8003752:	4603      	mov	r3, r0
 8003754:	f241 0203 	movw	r2, #4099	; 0x1003
 8003758:	4293      	cmp	r3, r2
 800375a:	d817      	bhi.n	800378c <HAL_RCC_OscConfig+0x1f4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d108      	bne.n	8003776 <HAL_RCC_OscConfig+0x1de>
 8003764:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003774:	e07a      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	031b      	lsls	r3, r3, #12
 8003784:	4926      	ldr	r1, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378a:	e06f      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	4921      	ldr	r1, [pc, #132]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	e064      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d047      	beq.n	800383a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0219 	bic.w	r2, r3, #25
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	491a      	ldr	r1, [pc, #104]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe fbfc 	bl	8001fb8 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fe fbf8 	bl	8001fb8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e332      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	f7fe fc19 	bl	8002018 <HAL_GetREVID>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d819      	bhi.n	8003824 <HAL_RCC_OscConfig+0x28c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d108      	bne.n	800380a <HAL_RCC_OscConfig+0x272>
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	6053      	str	r3, [r2, #4]
 8003808:	e030      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	031b      	lsls	r3, r3, #12
 8003818:	4901      	ldr	r1, [pc, #4]	; (8003820 <HAL_RCC_OscConfig+0x288>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
 800381e:	e025      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
 8003820:	58024400 	.word	0x58024400
 8003824:	4b9a      	ldr	r3, [pc, #616]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	4997      	ldr	r1, [pc, #604]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	e018      	b.n	800386c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383a:	4b95      	ldr	r3, [pc, #596]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a94      	ldr	r2, [pc, #592]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fe fbb7 	bl	8001fb8 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384e:	f7fe fbb3 	bl	8001fb8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e2ed      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003860:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a9 	beq.w	80039cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	4b85      	ldr	r3, [pc, #532]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003882:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003884:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d007      	beq.n	80038a0 <HAL_RCC_OscConfig+0x308>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b18      	cmp	r3, #24
 8003894:	d13a      	bne.n	800390c <HAL_RCC_OscConfig+0x374>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d135      	bne.n	800390c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_OscConfig+0x320>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e2c1      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038b8:	f7fe fbae 	bl	8002018 <HAL_GetREVID>
 80038bc:	4603      	mov	r3, r0
 80038be:	f241 0203 	movw	r2, #4099	; 0x1003
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d817      	bhi.n	80038f6 <HAL_RCC_OscConfig+0x35e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d108      	bne.n	80038e0 <HAL_RCC_OscConfig+0x348>
 80038ce:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038d6:	4a6e      	ldr	r2, [pc, #440]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038de:	e075      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e0:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	069b      	lsls	r3, r3, #26
 80038ee:	4968      	ldr	r1, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038f4:	e06a      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f6:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	4962      	ldr	r1, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800390a:	e05f      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d042      	beq.n	800399a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003914:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fb4a 	bl	8001fb8 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003928:	f7fe fb46 	bl	8001fb8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e280      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800393a:	4b55      	ldr	r3, [pc, #340]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003946:	f7fe fb67 	bl	8002018 <HAL_GetREVID>
 800394a:	4603      	mov	r3, r0
 800394c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003950:	4293      	cmp	r3, r2
 8003952:	d817      	bhi.n	8003984 <HAL_RCC_OscConfig+0x3ec>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2b20      	cmp	r3, #32
 800395a:	d108      	bne.n	800396e <HAL_RCC_OscConfig+0x3d6>
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003964:	4a4a      	ldr	r2, [pc, #296]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800396a:	6053      	str	r3, [r2, #4]
 800396c:	e02e      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
 800396e:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	069b      	lsls	r3, r3, #26
 800397c:	4944      	ldr	r1, [pc, #272]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e023      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
 8003984:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	493f      	ldr	r1, [pc, #252]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
 8003998:	e018      	b.n	80039cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fe fb07 	bl	8001fb8 <HAL_GetTick>
 80039aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039ae:	f7fe fb03 	bl	8001fb8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e23d      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039c0:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d036      	beq.n	8003a46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fe fae4 	bl	8001fb8 <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fe fae0 	bl	8001fb8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e21a      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x45c>
 8003a12:	e018      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a14:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe faca 	bl	8001fb8 <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fe fac6 	bl	8001fb8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e200      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d039      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a66:	f7fe faa7 	bl	8001fb8 <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a6e:	f7fe faa3 	bl	8001fb8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1dd      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4f8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
 8003a8c:	e01b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a94:	4b9b      	ldr	r3, [pc, #620]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a9a      	ldr	r2, [pc, #616]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe fa8a 	bl	8001fb8 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa8:	f7fe fa86 	bl	8001fb8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1c0      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aba:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8081 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ad4:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <HAL_RCC_OscConfig+0x770>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a8b      	ldr	r2, [pc, #556]	; (8003d08 <HAL_RCC_OscConfig+0x770>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe fa6a 	bl	8001fb8 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fe fa66 	bl	8001fb8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1a0      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afa:	4b83      	ldr	r3, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x770>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_OscConfig+0x584>
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a7c      	ldr	r2, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	e02d      	b.n	8003b78 <HAL_RCC_OscConfig+0x5e0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x5a6>
 8003b24:	4b77      	ldr	r3, [pc, #476]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	4b74      	ldr	r3, [pc, #464]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a73      	ldr	r2, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	f023 0304 	bic.w	r3, r3, #4
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCC_OscConfig+0x5e0>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5c8>
 8003b46:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0x5e0>
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a67      	ldr	r2, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6c:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003b72:	f023 0304 	bic.w	r3, r3, #4
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe fa1a 	bl	8001fb8 <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe fa16 	bl	8001fb8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e14e      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9e:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ee      	beq.n	8003b88 <HAL_RCC_OscConfig+0x5f0>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe fa04 	bl	8001fb8 <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fa00 	bl	8001fb8 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e138      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1ee      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 812d 	beq.w	8003e3a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be8:	2b18      	cmp	r3, #24
 8003bea:	f000 80bd 	beq.w	8003d68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	f040 809e 	bne.w	8003d34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b42      	ldr	r3, [pc, #264]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a41      	ldr	r2, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe f9d8 	bl	8001fb8 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe f9d4 	bl	8001fb8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e10e      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCC_OscConfig+0x774>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	4931      	ldr	r1, [pc, #196]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	628b      	str	r3, [r1, #40]	; 0x28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	3b01      	subs	r3, #1
 8003c54:	025b      	lsls	r3, r3, #9
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c74:	4923      	ldr	r1, [pc, #140]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c7a:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c92:	00d2      	lsls	r2, r2, #3
 8003c94:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	f023 020c 	bic.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4917      	ldr	r1, [pc, #92]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cac:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f023 0202 	bic.w	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	4912      	ldr	r1, [pc, #72]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fe f95d 	bl	8001fb8 <HAL_GetTick>
 8003cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d00:	e011      	b.n	8003d26 <HAL_RCC_OscConfig+0x78e>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
 8003d08:	58024800 	.word	0x58024800
 8003d0c:	fffffc0c 	.word	0xfffffc0c
 8003d10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe f950 	bl	8001fb8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e08a      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x77c>
 8003d32:	e082      	b.n	8003e3a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a42      	ldr	r2, [pc, #264]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe f93a 	bl	8001fb8 <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe f936 	bl	8001fb8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e070      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d5a:	4b3a      	ldr	r3, [pc, #232]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x7b0>
 8003d66:	e068      	b.n	8003e3a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d6e:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d031      	beq.n	8003de0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d122      	bne.n	8003de0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d111      	bne.n	8003de0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e02b      	b.n	8003e3c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d01f      	beq.n	8003e3a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e06:	f7fe f8d7 	bl	8001fb8 <HAL_GetTick>
 8003e0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e0c:	bf00      	nop
 8003e0e:	f7fe f8d3 	bl	8001fb8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d0f9      	beq.n	8003e0e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_RCC_OscConfig+0x8b0>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e26:	00d2      	lsls	r2, r2, #3
 8003e28:	4906      	ldr	r1, [pc, #24]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCC_OscConfig+0x8ac>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	; 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	ffff0007 	.word	0xffff0007

08003e4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e19c      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b8a      	ldr	r3, [pc, #552]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d910      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b87      	ldr	r3, [pc, #540]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	4985      	ldr	r1, [pc, #532]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b83      	ldr	r3, [pc, #524]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e184      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	4b7b      	ldr	r3, [pc, #492]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d908      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eac:	4b78      	ldr	r3, [pc, #480]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4975      	ldr	r1, [pc, #468]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b70      	ldr	r3, [pc, #448]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d908      	bls.n	8003eec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eda:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	496a      	ldr	r1, [pc, #424]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	4b64      	ldr	r3, [pc, #400]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d908      	bls.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f08:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	495e      	ldr	r1, [pc, #376]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f36:	4b56      	ldr	r3, [pc, #344]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4953      	ldr	r1, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f023 020f 	bic.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4947      	ldr	r1, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d055      	beq.n	800402e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4940      	ldr	r1, [pc, #256]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f9c:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d121      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0f6      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d115      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0ea      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0de      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0d6      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4925      	ldr	r1, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffe:	f7fd ffdb 	bl	8001fb8 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004004:	e00a      	b.n	800401c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004006:	f7fd ffd7 	bl	8001fb8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e0be      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401c:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	429a      	cmp	r2, r3
 800402c:	d1eb      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	429a      	cmp	r2, r3
 8004048:	d208      	bcs.n	800405c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f023 020f 	bic.w	r2, r3, #15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x244>)
 8004058:	4313      	orrs	r3, r2
 800405a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d214      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 020f 	bic.w	r2, r3, #15
 8004072:	4906      	ldr	r1, [pc, #24]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_RCC_ClockConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e086      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
 800408c:	52002000 	.word	0x52002000
 8004090:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d208      	bcs.n	80040c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	4939      	ldr	r1, [pc, #228]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040da:	429a      	cmp	r2, r3
 80040dc:	d208      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	492e      	ldr	r1, [pc, #184]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4922      	ldr	r1, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d208      	bcs.n	800414c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4917      	ldr	r1, [pc, #92]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004148:	4313      	orrs	r3, r2
 800414a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800414c:	f000 f89e 	bl	800428c <HAL_RCC_GetSysClockFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	4912      	ldr	r1, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x35c>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <HAL_RCC_ClockConfig+0x35c>)
 8004174:	5cd3      	ldrb	r3, [r2, r3]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x360>)
 8004182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x364>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x368>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fec8 	bl	8001f24 <HAL_InitTick>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	08009ffc 	.word	0x08009ffc
 80041ac:	24000004 	.word	0x24000004
 80041b0:	24000000 	.word	0x24000000
 80041b4:	24000008 	.word	0x24000008

080041b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d12a      	bne.n	8004220 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80041ca:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 80041cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d0:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 80041dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80041e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f2:	2303      	movs	r3, #3
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80041fe:	f107 031c 	add.w	r3, r7, #28
 8004202:	4619      	mov	r1, r3
 8004204:	481f      	ldr	r0, [pc, #124]	; (8004284 <HAL_RCC_MCOConfig+0xcc>)
 8004206:	f7fe fcbf 	bl	8002b88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	430b      	orrs	r3, r1
 8004218:	4919      	ldr	r1, [pc, #100]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800421e:	e02a      	b.n	8004276 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 8004222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 8004232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800423e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004248:	2303      	movs	r3, #3
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004250:	2300      	movs	r3, #0
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004254:	f107 031c 	add.w	r3, r7, #28
 8004258:	4619      	mov	r1, r3
 800425a:	480b      	ldr	r0, [pc, #44]	; (8004288 <HAL_RCC_MCOConfig+0xd0>)
 800425c:	f7fe fc94 	bl	8002b88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01d9      	lsls	r1, r3, #7
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	430b      	orrs	r3, r1
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCC_MCOConfig+0xc8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
}
 8004276:	bf00      	nop
 8004278:	3730      	adds	r7, #48	; 0x30
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
 8004284:	58020000 	.word	0x58020000
 8004288:	58020800 	.word	0x58020800

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4bb3      	ldr	r3, [pc, #716]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429a:	2b18      	cmp	r3, #24
 800429c:	f200 8155 	bhi.w	800454a <HAL_RCC_GetSysClockFreq+0x2be>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	0800454b 	.word	0x0800454b
 80042b0:	0800454b 	.word	0x0800454b
 80042b4:	0800454b 	.word	0x0800454b
 80042b8:	0800454b 	.word	0x0800454b
 80042bc:	0800454b 	.word	0x0800454b
 80042c0:	0800454b 	.word	0x0800454b
 80042c4:	0800454b 	.word	0x0800454b
 80042c8:	08004333 	.word	0x08004333
 80042cc:	0800454b 	.word	0x0800454b
 80042d0:	0800454b 	.word	0x0800454b
 80042d4:	0800454b 	.word	0x0800454b
 80042d8:	0800454b 	.word	0x0800454b
 80042dc:	0800454b 	.word	0x0800454b
 80042e0:	0800454b 	.word	0x0800454b
 80042e4:	0800454b 	.word	0x0800454b
 80042e8:	08004339 	.word	0x08004339
 80042ec:	0800454b 	.word	0x0800454b
 80042f0:	0800454b 	.word	0x0800454b
 80042f4:	0800454b 	.word	0x0800454b
 80042f8:	0800454b 	.word	0x0800454b
 80042fc:	0800454b 	.word	0x0800454b
 8004300:	0800454b 	.word	0x0800454b
 8004304:	0800454b 	.word	0x0800454b
 8004308:	0800433f 	.word	0x0800433f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004318:	4b91      	ldr	r3, [pc, #580]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	4a90      	ldr	r2, [pc, #576]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800432a:	e111      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800432c:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800432e:	61bb      	str	r3, [r7, #24]
      break;
 8004330:	e10e      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004332:	4b8d      	ldr	r3, [pc, #564]	; (8004568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004334:	61bb      	str	r3, [r7, #24]
      break;
 8004336:	e10b      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004338:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800433a:	61bb      	str	r3, [r7, #24]
      break;
 800433c:	e108      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004348:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004352:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004354:	4b82      	ldr	r3, [pc, #520]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800435e:	4b80      	ldr	r3, [pc, #512]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	08db      	lsrs	r3, r3, #3
 8004364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80e1 	beq.w	8004544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b02      	cmp	r3, #2
 8004386:	f000 8083 	beq.w	8004490 <HAL_RCC_GetSysClockFreq+0x204>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b02      	cmp	r3, #2
 800438e:	f200 80a1 	bhi.w	80044d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d056      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x1c0>
 800439e:	e099      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a0:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02d      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d6:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004406:	e087      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b51      	ldr	r3, [pc, #324]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a02 	vldr	s12, [r7, #8]
 800442e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800444a:	e065      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004472:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800448e:	e043      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800457c <HAL_RCC_GetSysClockFreq+0x2f0>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044d2:	e021      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004516:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004522:	3301      	adds	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004530:	edd7 6a07 	vldr	s13, [r7, #28]
 8004534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453c:	ee17 3a90 	vmov	r3, s15
 8004540:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004542:	e005      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
      break;
 8004548:	e002      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800454c:	61bb      	str	r3, [r7, #24]
      break;
 800454e:	bf00      	nop
  }

  return sysclockfreq;
 8004550:	69bb      	ldr	r3, [r7, #24]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	03d09000 	.word	0x03d09000
 8004568:	003d0900 	.word	0x003d0900
 800456c:	00b71b00 	.word	0x00b71b00
 8004570:	46000000 	.word	0x46000000
 8004574:	4c742400 	.word	0x4c742400
 8004578:	4a742400 	.word	0x4a742400
 800457c:	4b371b00 	.word	0x4b371b00

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004586:	f7ff fe81 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800458a:	4602      	mov	r2, r0
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	490f      	ldr	r1, [pc, #60]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045be:	4a07      	ldr	r2, [pc, #28]	; (80045dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	58024400 	.word	0x58024400
 80045d4:	08009ffc 	.word	0x08009ffc
 80045d8:	24000004 	.word	0x24000004
 80045dc:	24000000 	.word	0x24000000

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045e4:	f7ff ffcc 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4904      	ldr	r1, [pc, #16]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	58024400 	.word	0x58024400
 8004608:	08009ffc 	.word	0x08009ffc

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004610:	f7ff ffb6 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	58024400 	.word	0x58024400
 8004634:	08009ffc 	.word	0x08009ffc

08004638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b0ca      	sub	sp, #296	; 0x128
 800463e:	af00      	add	r7, sp, #0
 8004640:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800465c:	2500      	movs	r5, #0
 800465e:	ea54 0305 	orrs.w	r3, r4, r5
 8004662:	d049      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004674:	d828      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467a:	d01a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004680:	d822      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468a:	d007      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800468c:	e01c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468e:	4bb8      	ldr	r3, [pc, #736]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4ab7      	ldr	r2, [pc, #732]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800469a:	e01a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a0:	3308      	adds	r3, #8
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fb61 	bl	8006d6c <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046b0:	e00f      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	3328      	adds	r3, #40	; 0x28
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f002 fc08 	bl	8006ed0 <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046da:	4ba5      	ldr	r3, [pc, #660]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e8:	4aa1      	ldr	r2, [pc, #644]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6513      	str	r3, [r2, #80]	; 0x50
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004704:	f04f 0900 	mov.w	r9, #0
 8004708:	ea58 0309 	orrs.w	r3, r8, r9
 800470c:	d047      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	2b04      	cmp	r3, #4
 8004716:	d82a      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004735 	.word	0x08004735
 8004724:	08004743 	.word	0x08004743
 8004728:	08004759 	.word	0x08004759
 800472c:	08004777 	.word	0x08004777
 8004730:	08004777 	.word	0x08004777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	4a8d      	ldr	r2, [pc, #564]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004740:	e01a      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	3308      	adds	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f002 fb0e 	bl	8006d6c <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004756:	e00f      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	3328      	adds	r3, #40	; 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f002 fbb5 	bl	8006ed0 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004780:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	f023 0107 	bic.w	r1, r3, #7
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	4a78      	ldr	r2, [pc, #480]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6513      	str	r3, [r2, #80]	; 0x50
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80047aa:	f04f 0b00 	mov.w	fp, #0
 80047ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80047b2:	d04c      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d030      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c4:	d829      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047c6:	2bc0      	cmp	r3, #192	; 0xc0
 80047c8:	d02d      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047ca:	2bc0      	cmp	r3, #192	; 0xc0
 80047cc:	d825      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ce:	2b80      	cmp	r3, #128	; 0x80
 80047d0:	d018      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d821      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d007      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047de:	e01c      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e0:	4b63      	ldr	r3, [pc, #396]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a62      	ldr	r2, [pc, #392]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047ec:	e01c      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	3308      	adds	r3, #8
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f002 fab8 	bl	8006d6c <RCCEx_PLL2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004802:	e011      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	3328      	adds	r3, #40	; 0x28
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f002 fb5f 	bl	8006ed0 <RCCEx_PLL3_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	4a4c      	ldr	r2, [pc, #304]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6513      	str	r3, [r2, #80]	; 0x50
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800484a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800485a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004864:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d053      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d035      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800487c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004880:	d82e      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004882:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004886:	d031      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800488c:	d828      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800488e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004892:	d01a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004898:	d822      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800489e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a2:	d007      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048a4:	e01c      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a6:	4b32      	ldr	r3, [pc, #200]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	4a31      	ldr	r2, [pc, #196]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b2:	e01c      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	3308      	adds	r3, #8
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 fa55 	bl	8006d6c <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048c8:	e011      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	3328      	adds	r3, #40	; 0x28
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 fafc 	bl	8006ed0 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048de:	e006      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048e6:	e002      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004922:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800492c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d056      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004942:	d038      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004948:	d831      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800494a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800494e:	d034      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004954:	d82b      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800495a:	d01d      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800495c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004960:	d825      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800496c:	e01f      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4ba2      	ldr	r3, [pc, #648]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4aa1      	ldr	r2, [pc, #644]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004980:	e01c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	3308      	adds	r3, #8
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f002 f9ee 	bl	8006d6c <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499c:	3328      	adds	r3, #40	; 0x28
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f002 fa95 	bl	8006ed0 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049c4:	4b8e      	ldr	r3, [pc, #568]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049d4:	4a8a      	ldr	r2, [pc, #552]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6593      	str	r3, [r2, #88]	; 0x58
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d03a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d01f      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a0e:	2b30      	cmp	r3, #48	; 0x30
 8004a10:	d819      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d815      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d111      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a22:	4b77      	ldr	r3, [pc, #476]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a76      	ldr	r2, [pc, #472]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a2e:	e011      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	3308      	adds	r3, #8
 8004a36:	2102      	movs	r1, #2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 f997 	bl	8006d6c <RCCEx_PLL2_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a44:	e006      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d051      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa4:	d035      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aaa:	d82e      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab0:	d031      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab6:	d828      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abc:	d01a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d822      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004acc:	d007      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ace:	e01c      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004adc:	e01c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f002 f940 	bl	8006d6c <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	3328      	adds	r3, #40	; 0x28
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f002 f9e7 	bl	8006ed0 <RCCEx_PLL3_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b08:	e006      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6513      	str	r3, [r2, #80]	; 0x50
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	d056      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b68:	d033      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6e:	d82c      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b74:	d02f      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b7a:	d826      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b80:	d02b      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b86:	d820      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8c:	d012      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b92:	d81a      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d115      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f002 f8e0 	bl	8006d6c <RCCEx_PLL2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bb2:	e015      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb8:	3328      	adds	r3, #40	; 0x28
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 f987 	bl	8006ed0 <RCCEx_PLL3_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bd2:	bf00      	nop
 8004bd4:	e004      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf6:	4a02      	ldr	r2, [pc, #8]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6513      	str	r3, [r2, #80]	; 0x50
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d055      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d033      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c3e:	d82c      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d02f      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d826      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c50:	d02b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c56:	d820      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d012      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c62:	d81a      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d022      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6c:	d115      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	3308      	adds	r3, #8
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f002 f878 	bl	8006d6c <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c82:	e015      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	3328      	adds	r3, #40	; 0x28
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f002 f91f 	bl	8006ed0 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e004      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cb8:	4ba3      	ldr	r3, [pc, #652]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cc8:	4a9f      	ldr	r2, [pc, #636]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d037      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d02:	d00e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d816      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d12:	d111      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d14:	4b8c      	ldr	r3, [pc, #560]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a8b      	ldr	r2, [pc, #556]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d20:	e00f      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d26:	3308      	adds	r3, #8
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 f81e 	bl	8006d6c <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d36:	e004      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d4a:	4b7f      	ldr	r3, [pc, #508]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6513      	str	r3, [r2, #80]	; 0x50
 8004d5e:	e003      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4313      	orrs	r3, r2
 8004d86:	d039      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d81c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004dd5 	.word	0x08004dd5
 8004d9c:	08004da9 	.word	0x08004da9
 8004da0:	08004db7 	.word	0x08004db7
 8004da4:	08004dd5 	.word	0x08004dd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da8:	4b67      	ldr	r3, [pc, #412]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a66      	ldr	r2, [pc, #408]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004db4:	e00f      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	3308      	adds	r3, #8
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 ffd4 	bl	8006d6c <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dca:	e004      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dde:	4b5a      	ldr	r3, [pc, #360]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	f023 0103 	bic.w	r1, r3, #3
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f000 809f 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1e:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a4a      	ldr	r2, [pc, #296]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd f8c5 	bl	8001fb8 <HAL_GetTick>
 8004e2e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e32:	e00b      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fd f8c0 	bl	8001fb8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d903      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e4a:	e005      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ed      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d179      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e60:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e6c:	4053      	eors	r3, r2
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e76:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a30      	ldr	r2, [pc, #192]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e9a:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d118      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f882 	bl	8001fb8 <HAL_GetTick>
 8004eb4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb8:	e00d      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd f87d 	bl	8001fb8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004ed4:	e005      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0eb      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d129      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efa:	d10e      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f0c:	091a      	lsrs	r2, r3, #4
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6113      	str	r3, [r2, #16]
 8004f18:	e005      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004f46:	e009      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	58024800 	.word	0x58024800
 8004f50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 0301 	and.w	r3, r2, #1
 8004f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f000 8089 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f84:	2b28      	cmp	r3, #40	; 0x28
 8004f86:	d86b      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08005069 	.word	0x08005069
 8004f94:	08005061 	.word	0x08005061
 8004f98:	08005061 	.word	0x08005061
 8004f9c:	08005061 	.word	0x08005061
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08005061 	.word	0x08005061
 8004fa8:	08005061 	.word	0x08005061
 8004fac:	08005061 	.word	0x08005061
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	08005061 	.word	0x08005061
 8004fbc:	08005061 	.word	0x08005061
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	08005061 	.word	0x08005061
 8004fc8:	08005061 	.word	0x08005061
 8004fcc:	08005061 	.word	0x08005061
 8004fd0:	0800504b 	.word	0x0800504b
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005061 	.word	0x08005061
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005061 	.word	0x08005061
 8004fe4:	08005061 	.word	0x08005061
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005061 	.word	0x08005061
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005061 	.word	0x08005061
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	08005061 	.word	0x08005061
 8005008:	08005061 	.word	0x08005061
 800500c:	08005061 	.word	0x08005061
 8005010:	08005069 	.word	0x08005069
 8005014:	08005061 	.word	0x08005061
 8005018:	08005061 	.word	0x08005061
 800501c:	08005061 	.word	0x08005061
 8005020:	08005061 	.word	0x08005061
 8005024:	08005061 	.word	0x08005061
 8005028:	08005061 	.word	0x08005061
 800502c:	08005061 	.word	0x08005061
 8005030:	08005069 	.word	0x08005069
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	3308      	adds	r3, #8
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fe95 	bl	8006d6c <RCCEx_PLL2_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005048:	e00f      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504e:	3328      	adds	r3, #40	; 0x28
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f001 ff3c 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800505e:	e004      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005072:	4bbf      	ldr	r3, [pc, #764]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	4abb      	ldr	r2, [pc, #748]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6553      	str	r3, [r2, #84]	; 0x54
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 0302 	and.w	r3, r2, #2
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d041      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d824      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	080050d9 	.word	0x080050d9
 80050c8:	080050ef 	.word	0x080050ef
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800510d 	.word	0x0800510d
 80050d4:	0800510d 	.word	0x0800510d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050dc:	3308      	adds	r3, #8
 80050de:	2101      	movs	r1, #1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fe43 	bl	8006d6c <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f2:	3328      	adds	r3, #40	; 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 feea 	bl	8006ed0 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005116:	4b96      	ldr	r3, [pc, #600]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f023 0107 	bic.w	r1, r3, #7
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005124:	4a92      	ldr	r2, [pc, #584]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005126:	430b      	orrs	r3, r1
 8005128:	6553      	str	r3, [r2, #84]	; 0x54
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f002 0304 	and.w	r3, r2, #4
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800514e:	460b      	mov	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	d044      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515c:	2b05      	cmp	r3, #5
 800515e:	d825      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	080051b5 	.word	0x080051b5
 800516c:	08005181 	.word	0x08005181
 8005170:	08005197 	.word	0x08005197
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051b5 	.word	0x080051b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	3308      	adds	r3, #8
 8005186:	2101      	movs	r1, #1
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fdef 	bl	8006d6c <RCCEx_PLL2_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005194:	e00f      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519a:	3328      	adds	r3, #40	; 0x28
 800519c:	2101      	movs	r1, #1
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 fe96 	bl	8006ed0 <RCCEx_PLL3_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051aa:	e004      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80051b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051be:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f023 0107 	bic.w	r1, r3, #7
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ce:	4a68      	ldr	r2, [pc, #416]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6593      	str	r3, [r2, #88]	; 0x58
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f002 0320 	and.w	r3, r2, #32
 80051ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d055      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520a:	d033      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800520c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005210:	d82c      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d826      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800521e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005222:	d02b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005228:	d820      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522e:	d012      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005234:	d81a      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d022      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800523a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800523e:	d115      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005244:	3308      	adds	r3, #8
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f001 fd8f 	bl	8006d6c <RCCEx_PLL2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525a:	3328      	adds	r3, #40	; 0x28
 800525c:	2102      	movs	r1, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fe36 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a35      	ldr	r2, [pc, #212]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6553      	str	r3, [r2, #84]	; 0x54
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d058      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d6:	d033      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052dc:	d82c      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d02f      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d826      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ee:	d02b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f4:	d820      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fa:	d012      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d81a      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d022      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d115      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005310:	3308      	adds	r3, #8
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f001 fd29 	bl	8006d6c <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005320:	e015      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005326:	3328      	adds	r3, #40	; 0x28
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fdd0 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005336:	e00a      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800533e:	e006      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005340:	bf00      	nop
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005344:	bf00      	nop
 8005346:	e002      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10e      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005366:	4a02      	ldr	r2, [pc, #8]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6593      	str	r3, [r2, #88]	; 0x58
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005392:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005396:	460b      	mov	r3, r1
 8005398:	4313      	orrs	r3, r2
 800539a:	d055      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053a8:	d033      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053ae:	d82c      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d02f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d826      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053c0:	d02b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80053c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053c6:	d820      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053cc:	d012      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d2:	d81a      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d115      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e2:	3308      	adds	r3, #8
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fcc0 	bl	8006d6c <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053f2:	e015      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f8:	3328      	adds	r3, #40	; 0x28
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 fd67 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005408:	e00a      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005428:	4ba1      	ldr	r3, [pc, #644]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005438:	4a9d      	ldr	r2, [pc, #628]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800543a:	430b      	orrs	r3, r1
 800543c:	6593      	str	r3, [r2, #88]	; 0x58
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f002 0308 	and.w	r3, r2, #8
 8005454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d01e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3328      	adds	r3, #40	; 0x28
 800547c:	2102      	movs	r1, #2
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fd26 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005490:	4b87      	ldr	r3, [pc, #540]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a0:	4a83      	ldr	r2, [pc, #524]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f002 0310 	and.w	r3, r2, #16
 80054b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d01e      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d10c      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d8:	3328      	adds	r3, #40	; 0x28
 80054da:	2102      	movs	r1, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fcf7 	bl	8006ed0 <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ee:	4b70      	ldr	r3, [pc, #448]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fe:	4a6c      	ldr	r2, [pc, #432]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005500:	430b      	orrs	r3, r1
 8005502:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800551a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d03e      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800552c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005530:	d022      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005536:	d81b      	bhi.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d00b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005542:	e015      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	3308      	adds	r3, #8
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fc0d 	bl	8006d6c <RCCEx_PLL2_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005558:	e00f      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555e:	3328      	adds	r3, #40	; 0x28
 8005560:	2102      	movs	r1, #2
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fcb4 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800556e:	e004      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005592:	4a47      	ldr	r2, [pc, #284]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005594:	430b      	orrs	r3, r1
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80055ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b0:	2300      	movs	r3, #0
 80055b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ca:	d01f      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055d0:	d818      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d6:	d003      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055dc:	d007      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055ec:	e00f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	3328      	adds	r3, #40	; 0x28
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fc6a 	bl	8006ed0 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6553      	str	r3, [r2, #84]	; 0x54
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005642:	673b      	str	r3, [r7, #112]	; 0x70
 8005644:	2300      	movs	r3, #0
 8005646:	677b      	str	r3, [r7, #116]	; 0x74
 8005648:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d034      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d007      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005662:	e011      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005670:	e00e      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	3308      	adds	r3, #8
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fb76 	bl	8006d6c <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005686:	e003      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	4a02      	ldr	r2, [pc, #8]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ac:	e006      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80056c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ca:	2300      	movs	r3, #0
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d00c      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056dc:	3328      	adds	r3, #40	; 0x28
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fbf5 	bl	8006ed0 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80056fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005700:	2300      	movs	r3, #0
 8005702:	667b      	str	r3, [r7, #100]	; 0x64
 8005704:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005708:	460b      	mov	r3, r1
 800570a:	4313      	orrs	r3, r2
 800570c:	d038      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571a:	d018      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800571c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005720:	d811      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005726:	d014      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d80b      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d011      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d106      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4bc3      	ldr	r3, [pc, #780]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4ac2      	ldr	r2, [pc, #776]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800574c:	e004      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005760:	4bb9      	ldr	r3, [pc, #740]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005770:	4ab5      	ldr	r2, [pc, #724]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005772:	430b      	orrs	r3, r1
 8005774:	6553      	str	r3, [r2, #84]	; 0x54
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
 800578e:	2300      	movs	r3, #0
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800579c:	4baa      	ldr	r3, [pc, #680]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4aa7      	ldr	r2, [pc, #668]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
 80057be:	2300      	movs	r3, #0
 80057c0:	657b      	str	r3, [r7, #84]	; 0x54
 80057c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057cc:	4b9e      	ldr	r3, [pc, #632]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057dc:	4a9a      	ldr	r2, [pc, #616]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	2300      	movs	r3, #0
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057fe:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580c:	4a8e      	ldr	r2, [pc, #568]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
 8005820:	2300      	movs	r3, #0
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800582e:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4a85      	ldr	r2, [pc, #532]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005838:	6113      	str	r3, [r2, #16]
 800583a:	4b83      	ldr	r3, [pc, #524]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583c:	6919      	ldr	r1, [r3, #16]
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005846:	4a80      	ldr	r2, [pc, #512]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
 800585a:	2300      	movs	r3, #0
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005868:	4b77      	ldr	r3, [pc, #476]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	4a74      	ldr	r2, [pc, #464]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005878:	430b      	orrs	r3, r1
 800587a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005898:	4b6b      	ldr	r3, [pc, #428]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	2100      	movs	r1, #0
 80058b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80058c4:	460b      	mov	r3, r1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	3308      	adds	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fa4a 	bl	8006d6c <RCCEx_PLL2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	2100      	movs	r1, #0
 80058f8:	6239      	str	r1, [r7, #32]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d011      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	3308      	adds	r3, #8
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fa2a 	bl	8006d6c <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800592a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	2100      	movs	r1, #0
 8005938:	61b9      	str	r1, [r7, #24]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d011      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fa0a 	bl	8006d6c <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800595e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	2100      	movs	r1, #0
 8005978:	6139      	str	r1, [r7, #16]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005984:	460b      	mov	r3, r1
 8005986:	4313      	orrs	r3, r2
 8005988:	d011      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598e:	3328      	adds	r3, #40	; 0x28
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fa9c 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	2100      	movs	r1, #0
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d011      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	3328      	adds	r3, #40	; 0x28
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 fa7c 	bl	8006ed0 <RCCEx_PLL3_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	2100      	movs	r1, #0
 80059f8:	6039      	str	r1, [r7, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d011      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	3328      	adds	r3, #40	; 0x28
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 fa5c 	bl	8006ed0 <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005a2e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	58024400 	.word	0x58024400

08005a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b090      	sub	sp, #64	; 0x40
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	f040 8094 	bne.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a64:	4b9e      	ldr	r3, [pc, #632]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	f200 8087 	bhi.w	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005ae1 	.word	0x08005ae1
 8005a88:	08005b7d 	.word	0x08005b7d
 8005a8c:	08005b09 	.word	0x08005b09
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a90:	4b93      	ldr	r3, [pc, #588]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a9c:	d108      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f810 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aac:	f000 bd45 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab4:	f000 bd41 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ab8:	4b89      	ldr	r3, [pc, #548]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac4:	d108      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fd54 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ad4:	f000 bd31 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005adc:	f000 bd2d 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ae0:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aec:	d108      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fe94 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005afc:	f000 bd1d 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b04:	f000 bd19 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b08:	4b75      	ldr	r3, [pc, #468]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b12:	4b73      	ldr	r3, [pc, #460]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b24:	4b6e      	ldr	r3, [pc, #440]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	08db      	lsrs	r3, r3, #3
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	4a6d      	ldr	r2, [pc, #436]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b36:	e01f      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b38:	4b69      	ldr	r3, [pc, #420]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	d106      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b4c:	d102      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b4e:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b52:	e011      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b54:	4b62      	ldr	r3, [pc, #392]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b60:	d106      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b68:	d102      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b6a:	4b60      	ldr	r3, [pc, #384]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6e:	e003      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b74:	f000 bce1 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b78:	f000 bcdf 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b7c:	4b5c      	ldr	r3, [pc, #368]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b80:	f000 bcdb 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b88:	f000 bcd7 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b90:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005b94:	430b      	orrs	r3, r1
 8005b96:	f040 80ad 	bne.w	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005baa:	d056      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	f200 8090 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2bc0      	cmp	r3, #192	; 0xc0
 8005bba:	f000 8088 	beq.w	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc2:	f200 8088 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	d032      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	f200 8081 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d014      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005be0:	e079      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005be2:	4b3f      	ldr	r3, [pc, #252]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bee:	d108      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 ff67 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfe:	f000 bc9c 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c06:	f000 bc98 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c0a:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c16:	d108      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c18:	f107 0318 	add.w	r3, r7, #24
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fcab 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c26:	f000 bc88 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c2e:	f000 bc84 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3e:	d108      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fdeb 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c4e:	f000 bc74 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c56:	f000 bc70 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c5a:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c64:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	08db      	lsrs	r3, r3, #3
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c88:	e01f      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c9e:	d102      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca4:	e011      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	e003      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005cc6:	f000 bc38 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cca:	f000 bc36 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd2:	f000 bc32 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cda:	f000 bc2e 	b.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	03d09000 	.word	0x03d09000
 8005ce8:	003d0900 	.word	0x003d0900
 8005cec:	00b71b00 	.word	0x00b71b00
 8005cf0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	f040 809c 	bne.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005d02:	4b9e      	ldr	r3, [pc, #632]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d12:	d054      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d1a:	f200 808b 	bhi.w	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d24:	f000 8083 	beq.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d2e:	f200 8081 	bhi.w	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d40:	d878      	bhi.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d4e:	d012      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d50:	e070      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d52:	4b8a      	ldr	r3, [pc, #552]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 feaf 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d6e:	e3e4      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d74:	e3e1      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d76:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d82:	d107      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d84:	f107 0318 	add.w	r3, r7, #24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fbf5 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d92:	e3d2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d98:	e3cf      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d9a:	4b78      	ldr	r3, [pc, #480]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da6:	d107      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd37 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005db6:	e3c0      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dbc:	e3bd      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dbe:	4b6f      	ldr	r3, [pc, #444]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d10c      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dda:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	4a66      	ldr	r2, [pc, #408]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dec:	e01e      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dee:	4b63      	ldr	r3, [pc, #396]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d106      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d102      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e04:	4b5f      	ldr	r3, [pc, #380]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e08:	e010      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e0a:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e16:	d106      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e1e:	d102      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e20:	4b59      	ldr	r3, [pc, #356]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e24:	e002      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005e2a:	e386      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e2c:	e385      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e2e:	4b57      	ldr	r3, [pc, #348]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e32:	e382      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e38:	e37f      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e3e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005e42:	430b      	orrs	r3, r1
 8005e44:	f040 80a7 	bne.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e48:	4b4c      	ldr	r3, [pc, #304]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e58:	d055      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e60:	f200 8096 	bhi.w	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e6a:	f000 8084 	beq.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e74:	f200 808c 	bhi.w	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e7e:	d030      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e86:	f200 8083 	bhi.w	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e96:	d012      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005e98:	e07a      	b.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e9a:	4b38      	ldr	r3, [pc, #224]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fe0b 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eb6:	e340      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ebc:	e33d      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ebe:	4b2f      	ldr	r3, [pc, #188]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eca:	d107      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ecc:	f107 0318 	add.w	r3, r7, #24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fb51 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eda:	e32e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee0:	e32b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee2:	4b26      	ldr	r3, [pc, #152]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eee:	d107      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fc93 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005efe:	e31c      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f04:	e319      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f06:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	e01e      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	d106      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f50:	e010      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f52:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f66:	d102      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6c:	e002      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005f72:	e2e2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f74:	e2e1      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f7a:	e2de      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	03d09000 	.word	0x03d09000
 8005f84:	003d0900 	.word	0x003d0900
 8005f88:	00b71b00 	.word	0x00b71b00
 8005f8c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f94:	e2d1      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f040 809c 	bne.w	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fa4:	4b93      	ldr	r3, [pc, #588]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb4:	d054      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fbc:	f200 808b 	bhi.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fc6:	f000 8083 	beq.w	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd0:	f200 8081 	bhi.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d02f      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d878      	bhi.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d012      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005ff2:	e070      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ff4:	4b7f      	ldr	r3, [pc, #508]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fd5e 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006010:	e293      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006016:	e290      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006018:	4b76      	ldr	r3, [pc, #472]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006026:	f107 0318 	add.w	r3, r7, #24
 800602a:	4618      	mov	r0, r3
 800602c:	f000 faa4 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006034:	e281      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800603a:	e27e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800603c:	4b6d      	ldr	r3, [pc, #436]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006048:	d107      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fbe6 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006058:	e26f      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605e:	e26c      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006060:	4b64      	ldr	r3, [pc, #400]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006068:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800606a:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d10c      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800607c:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	08db      	lsrs	r3, r3, #3
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	4a5c      	ldr	r2, [pc, #368]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608e:	e01e      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006090:	4b58      	ldr	r3, [pc, #352]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609c:	d106      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a4:	d102      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060a6:	4b55      	ldr	r3, [pc, #340]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060aa:	e010      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ac:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b8:	d106      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c0:	d102      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060c2:	4b4f      	ldr	r3, [pc, #316]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80060cc:	e235      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060ce:	e234      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060d0:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d4:	e231      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060da:	e22e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80060e4:	430b      	orrs	r3, r1
 80060e6:	f040 808f 	bne.w	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80060f2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060fa:	d06b      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006102:	d874      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800610a:	d056      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006112:	d86c      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800611a:	d03b      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006122:	d864      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800612a:	d021      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006132:	d85c      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d004      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006142:	e054      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe fa4c 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8006148:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800614a:	e1f6      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800614c:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006158:	d107      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615a:	f107 0318 	add.w	r3, r7, #24
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa0a 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006168:	e1e7      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800616e:	e1e4      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006170:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 030c 	add.w	r3, r7, #12
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fb4c 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800618c:	e1d5      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006192:	e1d2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006194:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d109      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b2:	e1c2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b8:	e1bf      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061ba:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c6:	d102      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061cc:	e1b5      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d2:	e1b2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061d4:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061e0:	d102      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e6:	e1a8      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ec:	e1a5      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f2:	e1a2      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061f4:	58024400 	.word	0x58024400
 80061f8:	03d09000 	.word	0x03d09000
 80061fc:	003d0900 	.word	0x003d0900
 8006200:	00b71b00 	.word	0x00b71b00
 8006204:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006210:	430b      	orrs	r3, r1
 8006212:	d173      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006214:	4b9c      	ldr	r3, [pc, #624]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006224:	d02f      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622c:	d863      	bhi.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623a:	d012      	beq.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800623c:	e05b      	b.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800623e:	4b92      	ldr	r3, [pc, #584]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800624a:	d107      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624c:	f107 0318 	add.w	r3, r7, #24
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f991 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800625a:	e16e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006260:	e16b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006262:	4b89      	ldr	r3, [pc, #548]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800626a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626e:	d107      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fad3 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800627e:	e15c      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006284:	e159      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006286:	4b80      	ldr	r3, [pc, #512]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800628e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006290:	4b7d      	ldr	r3, [pc, #500]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b04      	cmp	r3, #4
 800629a:	d10c      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a2:	4b79      	ldr	r3, [pc, #484]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	08db      	lsrs	r3, r3, #3
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	4a77      	ldr	r2, [pc, #476]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80062ae:	fa22 f303 	lsr.w	r3, r2, r3
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b4:	e01e      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062b6:	4b74      	ldr	r3, [pc, #464]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d106      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ca:	d102      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062cc:	4b70      	ldr	r3, [pc, #448]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d0:	e010      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062d2:	4b6d      	ldr	r3, [pc, #436]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062de:	d106      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e6:	d102      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062e8:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ec:	e002      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062f2:	e122      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062f4:	e121      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062fa:	e11e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006300:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006304:	430b      	orrs	r3, r1
 8006306:	d133      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006308:	4b5f      	ldr	r3, [pc, #380]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d012      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006320:	e023      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006322:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fbc7 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800633e:	e0fc      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006344:	e0f9      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006346:	4b50      	ldr	r3, [pc, #320]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006354:	f107 0318 	add.w	r3, r7, #24
 8006358:	4618      	mov	r0, r3
 800635a:	f000 f90d 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006362:	e0ea      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006368:	e0e7      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800636e:	e0e4      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006378:	430b      	orrs	r3, r1
 800637a:	f040 808d 	bne.w	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800637e:	4b42      	ldr	r3, [pc, #264]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006386:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800638e:	d06b      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006396:	d874      	bhi.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d056      	beq.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d86c      	bhi.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063ae:	d03b      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063b6:	d864      	bhi.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063be:	d021      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c6:	d85c      	bhi.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063d4:	d004      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80063d6:	e054      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063d8:	f000 f8b8 	bl	800654c <HAL_RCCEx_GetD3PCLK1Freq>
 80063dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063de:	e0ac      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063e0:	4b29      	ldr	r3, [pc, #164]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ec:	d107      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ee:	f107 0318 	add.w	r3, r7, #24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f8c0 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063fc:	e09d      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006402:	e09a      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006404:	4b20      	ldr	r3, [pc, #128]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d107      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fa02 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006420:	e08b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006426:	e088      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b04      	cmp	r3, #4
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006446:	e078      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644c:	e075      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800644e:	4b0e      	ldr	r3, [pc, #56]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645a:	d102      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006460:	e06b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006466:	e068      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006474:	d102      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800647a:	e05e      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006480:	e05b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006486:	e058      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006488:	58024400 	.word	0x58024400
 800648c:	03d09000 	.word	0x03d09000
 8006490:	003d0900 	.word	0x003d0900
 8006494:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80064a0:	430b      	orrs	r3, r1
 80064a2:	d148      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064a4:	4b27      	ldr	r3, [pc, #156]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b4:	d02a      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064bc:	d838      	bhi.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ca:	d00d      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80064cc:	e030      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064da:	d102      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e0:	e02b      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e6:	e028      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064e8:	4b16      	ldr	r3, [pc, #88]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f4:	d107      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fae4 	bl	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006504:	e019      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650a:	e016      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651a:	f107 0318 	add.w	r3, r7, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f82a 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006528:	e007      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652e:	e004      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006534:	e001      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800653c:	4618      	mov	r0, r3
 800653e:	3740      	adds	r7, #64	; 0x40
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	58024400 	.word	0x58024400
 8006548:	00b71b00 	.word	0x00b71b00

0800654c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006550:	f7fe f816 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4904      	ldr	r1, [pc, #16]	; (8006574 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400
 8006574:	08009ffc 	.word	0x08009ffc

08006578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006580:	4ba1      	ldr	r3, [pc, #644]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800658a:	4b9f      	ldr	r3, [pc, #636]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	0b1b      	lsrs	r3, r3, #12
 8006590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006594:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006596:	4b9c      	ldr	r3, [pc, #624]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065a2:	4b99      	ldr	r3, [pc, #612]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8111 	beq.w	80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	f000 8083 	beq.w	80066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f200 80a1 	bhi.w	8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d056      	beq.n	8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065e2:	e099      	b.n	8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e4:	4b88      	ldr	r3, [pc, #544]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02d      	beq.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f0:	4b85      	ldr	r3, [pc, #532]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	4a84      	ldr	r2, [pc, #528]	; (800680c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a03 	vldr	s12, [r7, #12]
 800662e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800664a:	e087      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800665a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665e:	4b6a      	ldr	r3, [pc, #424]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006672:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800668e:	e065      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800669e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a2:	4b59      	ldr	r3, [pc, #356]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066d2:	e043      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800681c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e6:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006716:	e021      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	4b37      	ldr	r3, [pc, #220]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	ed97 6a03 	vldr	s12, [r7, #12]
 800673e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800675a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	0a5b      	lsrs	r3, r3, #9
 8006762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006776:	edd7 6a07 	vldr	s13, [r7, #28]
 800677a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006782:	ee17 2a90 	vmov	r2, s15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b0:	ee17 2a90 	vmov	r2, s15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	0e1b      	lsrs	r3, r3, #24
 80067be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067de:	ee17 2a90 	vmov	r2, s15
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067e6:	e008      	b.n	80067fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	609a      	str	r2, [r3, #8]
}
 80067fa:	bf00      	nop
 80067fc:	3724      	adds	r7, #36	; 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
 800680c:	03d09000 	.word	0x03d09000
 8006810:	46000000 	.word	0x46000000
 8006814:	4c742400 	.word	0x4c742400
 8006818:	4a742400 	.word	0x4a742400
 800681c:	4b371b00 	.word	0x4b371b00

08006820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006820:	b480      	push	{r7}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006828:	4ba1      	ldr	r3, [pc, #644]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006832:	4b9f      	ldr	r3, [pc, #636]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	0d1b      	lsrs	r3, r3, #20
 8006838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800683c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800683e:	4b9c      	ldr	r3, [pc, #624]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800684a:	4b99      	ldr	r3, [pc, #612]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8111 	beq.w	8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b02      	cmp	r3, #2
 8006872:	f000 8083 	beq.w	800697c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f200 80a1 	bhi.w	80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d056      	beq.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800688a:	e099      	b.n	80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688c:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02d      	beq.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006898:	4b85      	ldr	r3, [pc, #532]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	4a84      	ldr	r2, [pc, #528]	; (8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
 80068a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068f2:	e087      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006906:	4b6a      	ldr	r3, [pc, #424]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a03 	vldr	s12, [r7, #12]
 800691a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006936:	e065      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694a:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	ed97 6a03 	vldr	s12, [r7, #12]
 800695e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800697a:	e043      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b48      	ldr	r3, [pc, #288]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069be:	e021      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d2:	4b37      	ldr	r3, [pc, #220]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a04:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	0a5b      	lsrs	r3, r3, #9
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2a:	ee17 2a90 	vmov	r2, s15
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a58:	ee17 2a90 	vmov	r2, s15
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a60:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	0e1b      	lsrs	r3, r3, #24
 8006a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a86:	ee17 2a90 	vmov	r2, s15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
}
 8006aa2:	bf00      	nop
 8006aa4:	3724      	adds	r7, #36	; 0x24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	03d09000 	.word	0x03d09000
 8006ab8:	46000000 	.word	0x46000000
 8006abc:	4c742400 	.word	0x4c742400
 8006ac0:	4a742400 	.word	0x4a742400
 8006ac4:	4b371b00 	.word	0x4b371b00

08006ac8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad0:	4ba0      	ldr	r3, [pc, #640]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006ada:	4b9e      	ldr	r3, [pc, #632]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	091b      	lsrs	r3, r3, #4
 8006ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ae6:	4b9b      	ldr	r3, [pc, #620]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006af0:	4b98      	ldr	r3, [pc, #608]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8111 	beq.w	8006d36 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	f000 8083 	beq.w	8006c22 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	f200 80a1 	bhi.w	8006c66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d056      	beq.n	8006bde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b30:	e099      	b.n	8006c66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b32:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02d      	beq.n	8006b9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b3e:	4b85      	ldr	r3, [pc, #532]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	4a83      	ldr	r2, [pc, #524]	; (8006d58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b68:	4b7a      	ldr	r3, [pc, #488]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b98:	e087      	b.n	8006caa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bac:	4b69      	ldr	r3, [pc, #420]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bdc:	e065      	b.n	8006caa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf0:	4b58      	ldr	r3, [pc, #352]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c04:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c20:	e043      	b.n	8006caa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c34:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c48:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c64:	e021      	b.n	8006caa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c70:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006d60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	0a5b      	lsrs	r3, r3, #9
 8006cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd0:	ee17 2a90 	vmov	r2, s15
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	0c1b      	lsrs	r3, r3, #16
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d34:	e008      	b.n	8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	3724      	adds	r7, #36	; 0x24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	58024400 	.word	0x58024400
 8006d58:	03d09000 	.word	0x03d09000
 8006d5c:	46000000 	.word	0x46000000
 8006d60:	4c742400 	.word	0x4c742400
 8006d64:	4a742400 	.word	0x4a742400
 8006d68:	4b371b00 	.word	0x4b371b00

08006d6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d7a:	4b53      	ldr	r3, [pc, #332]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d101      	bne.n	8006d8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e099      	b.n	8006ebe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d8a:	4b4f      	ldr	r3, [pc, #316]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006d90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d96:	f7fb f90f 	bl	8001fb8 <HAL_GetTick>
 8006d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d9c:	e008      	b.n	8006db0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d9e:	f7fb f90b 	bl	8001fb8 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e086      	b.n	8006ebe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006db0:	4b45      	ldr	r3, [pc, #276]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f0      	bne.n	8006d9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dbc:	4b42      	ldr	r3, [pc, #264]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	493f      	ldr	r1, [pc, #252]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	628b      	str	r3, [r1, #40]	; 0x28
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	025b      	lsls	r3, r3, #9
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	061b      	lsls	r3, r3, #24
 8006dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e00:	4931      	ldr	r1, [pc, #196]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e06:	4b30      	ldr	r3, [pc, #192]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	492d      	ldr	r1, [pc, #180]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e18:	4b2b      	ldr	r3, [pc, #172]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	f023 0220 	bic.w	r2, r3, #32
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	4928      	ldr	r1, [pc, #160]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e2a:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4a26      	ldr	r2, [pc, #152]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e30:	f023 0310 	bic.w	r3, r3, #16
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e36:	4b24      	ldr	r3, [pc, #144]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e3a:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <RCCEx_PLL2_Config+0x160>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	69d2      	ldr	r2, [r2, #28]
 8006e42:	00d2      	lsls	r2, r2, #3
 8006e44:	4920      	ldr	r1, [pc, #128]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	f043 0310 	orr.w	r3, r3, #16
 8006e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a19      	ldr	r2, [pc, #100]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e68:	e00f      	b.n	8006e8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d106      	bne.n	8006e7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e7c:	e005      	b.n	8006e8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e96:	f7fb f88f 	bl	8001fb8 <HAL_GetTick>
 8006e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e9c:	e008      	b.n	8006eb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e9e:	f7fb f88b 	bl	8001fb8 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e006      	b.n	8006ebe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <RCCEx_PLL2_Config+0x15c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	58024400 	.word	0x58024400
 8006ecc:	ffff0007 	.word	0xffff0007

08006ed0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ede:	4b53      	ldr	r3, [pc, #332]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d101      	bne.n	8006eee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e099      	b.n	8007022 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006eee:	4b4f      	ldr	r3, [pc, #316]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a4e      	ldr	r2, [pc, #312]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efa:	f7fb f85d 	bl	8001fb8 <HAL_GetTick>
 8006efe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f00:	e008      	b.n	8006f14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f02:	f7fb f859 	bl	8001fb8 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e086      	b.n	8007022 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f14:	4b45      	ldr	r3, [pc, #276]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f0      	bne.n	8006f02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f20:	4b42      	ldr	r3, [pc, #264]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	051b      	lsls	r3, r3, #20
 8006f2e:	493f      	ldr	r1, [pc, #252]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	628b      	str	r3, [r1, #40]	; 0x28
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	025b      	lsls	r3, r3, #9
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f64:	4931      	ldr	r1, [pc, #196]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f6a:	4b30      	ldr	r3, [pc, #192]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	492d      	ldr	r1, [pc, #180]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	4928      	ldr	r1, [pc, #160]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f8e:	4b27      	ldr	r3, [pc, #156]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	4a26      	ldr	r2, [pc, #152]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <RCCEx_PLL3_Config+0x160>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	69d2      	ldr	r2, [r2, #28]
 8006fa6:	00d2      	lsls	r2, r2, #3
 8006fa8:	4920      	ldr	r1, [pc, #128]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fae:	4b1f      	ldr	r3, [pc, #124]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	4a1e      	ldr	r2, [pc, #120]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a19      	ldr	r2, [pc, #100]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fcc:	e00f      	b.n	8006fee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d106      	bne.n	8006fe2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a14      	ldr	r2, [pc, #80]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fe0:	e005      	b.n	8006fee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	4a11      	ldr	r2, [pc, #68]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ffa:	f7fa ffdd 	bl	8001fb8 <HAL_GetTick>
 8006ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007000:	e008      	b.n	8007014 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007002:	f7fa ffd9 	bl	8001fb8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e006      	b.n	8007022 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <RCCEx_PLL3_Config+0x15c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
 8007030:	ffff0007 	.word	0xffff0007

08007034 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e075      	b.n	8007132 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d105      	bne.n	800705e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fa fbaf 	bl	80017bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2204      	movs	r2, #4
 8007062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f868 	bl	800713c <HAL_SD_InitCard>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e05d      	b.n	8007132 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007076:	f107 0308 	add.w	r3, r7, #8
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa9d 	bl	80075bc <HAL_SD_GetCardStatus>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e052      	b.n	8007132 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800708c:	7e3b      	ldrb	r3, [r7, #24]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007092:	7e7b      	ldrb	r3, [r7, #25]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10a      	bne.n	80070b6 <HAL_SD_Init+0x82>
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <HAL_SD_Init+0x78>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b2:	659a      	str	r2, [r3, #88]	; 0x58
 80070b4:	e00b      	b.n	80070ce <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d104      	bne.n	80070c8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070c4:	659a      	str	r2, [r3, #88]	; 0x58
 80070c6:	e002      	b.n	80070ce <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb2f 	bl	8007738 <HAL_SD_ConfigWideBusOperation>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e026      	b.n	8007132 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80070e4:	f7fa ff68 	bl	8001fb8 <HAL_GetTick>
 80070e8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80070ea:	e011      	b.n	8007110 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070ec:	f7fa ff64 	bl	8001fb8 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d109      	bne.n	8007110 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007102:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e010      	b.n	8007132 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc23 	bl	800795c <HAL_SD_GetCardState>
 8007116:	4603      	mov	r3, r0
 8007118:	2b04      	cmp	r3, #4
 800711a:	d1e7      	bne.n	80070ec <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3728      	adds	r7, #40	; 0x28
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b08d      	sub	sp, #52	; 0x34
 8007140:	af02      	add	r7, sp, #8
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007148:	2300      	movs	r3, #0
 800714a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007150:	2300      	movs	r3, #0
 8007152:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007154:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007158:	f04f 0100 	mov.w	r1, #0
 800715c:	f7fe fc76 	bl	8005a4c <HAL_RCCEx_GetPeriphCLKFreq>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007176:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e070      	b.n	800725e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	4a39      	ldr	r2, [pc, #228]	; (8007268 <HAL_SD_InitCard+0x12c>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	091b      	lsrs	r3, r3, #4
 8007188:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681c      	ldr	r4, [r3, #0]
 800718e:	466a      	mov	r2, sp
 8007190:	f107 0318 	add.w	r3, r7, #24
 8007194:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007198:	e882 0003 	stmia.w	r2, {r0, r1}
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071a2:	4620      	mov	r0, r4
 80071a4:	f002 f9d0 	bl	8009548 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 fa02 	bl	80095b6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80071ca:	4a28      	ldr	r2, [pc, #160]	; (800726c <HAL_SD_InitCard+0x130>)
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	3301      	adds	r3, #1
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fa fefb 	bl	8001fd0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fcac 	bl	8007b38 <SD_PowerON>
 80071e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e02e      	b.n	800725e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fbcb 	bl	800799c <SD_InitCard>
 8007206:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e01b      	b.n	800725e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fa56 	bl	80096e0 <SDMMC_CmdBlockLength>
 8007234:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00f      	beq.n	800725c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <HAL_SD_InitCard+0x134>)
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	372c      	adds	r7, #44	; 0x2c
 8007262:	46bd      	mov	sp, r7
 8007264:	bd90      	pop	{r4, r7, pc}
 8007266:	bf00      	nop
 8007268:	014f8b59 	.word	0x014f8b59
 800726c:	00012110 	.word	0x00012110
 8007270:	1fe00fff 	.word	0x1fe00fff

08007274 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	0f9b      	lsrs	r3, r3, #30
 8007284:	b2da      	uxtb	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	0e9b      	lsrs	r3, r3, #26
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a0:	0e1b      	lsrs	r3, r3, #24
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d4:	0d1b      	lsrs	r3, r3, #20
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f2:	0bdb      	lsrs	r3, r3, #15
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007304:	0b9b      	lsrs	r3, r3, #14
 8007306:	b2db      	uxtb	r3, r3
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	b2da      	uxtb	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007316:	0b5b      	lsrs	r3, r3, #13
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007328:	0b1b      	lsrs	r3, r3, #12
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2200      	movs	r2, #0
 800733a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d163      	bne.n	800740c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	009a      	lsls	r2, r3, #2
 800734a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800734e:	4013      	ands	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007354:	0f92      	lsrs	r2, r2, #30
 8007356:	431a      	orrs	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007360:	0edb      	lsrs	r3, r3, #27
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	b2da      	uxtb	r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007372:	0e1b      	lsrs	r3, r3, #24
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	b2da      	uxtb	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007384:	0d5b      	lsrs	r3, r3, #21
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	b2da      	uxtb	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007396:	0c9b      	lsrs	r3, r3, #18
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	0bdb      	lsrs	r3, r3, #15
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	7e1b      	ldrb	r3, [r3, #24]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	3302      	adds	r3, #2
 80073cc:	2201      	movs	r2, #1
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073d6:	fb03 f202 	mul.w	r2, r3, r2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	7a1b      	ldrb	r3, [r3, #8]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80073f8:	0a52      	lsrs	r2, r2, #9
 80073fa:	fb03 f202 	mul.w	r2, r3, r2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
 800740a:	e031      	b.n	8007470 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	2b01      	cmp	r3, #1
 8007412:	d11d      	bne.n	8007450 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	431a      	orrs	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	029a      	lsls	r2, r3, #10
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007444:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
 800744e:	e00f      	b.n	8007470 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_SD_GetCardCSD+0x344>)
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e09d      	b.n	80075ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007474:	0b9b      	lsrs	r3, r3, #14
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007486:	09db      	lsrs	r3, r3, #7
 8007488:	b2db      	uxtb	r3, r3
 800748a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748e:	b2da      	uxtb	r2, r3
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a8:	0fdb      	lsrs	r3, r3, #31
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b4:	0f5b      	lsrs	r3, r3, #29
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c6:	0e9b      	lsrs	r3, r3, #26
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d8:	0d9b      	lsrs	r3, r3, #22
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ea:	0d5b      	lsrs	r3, r3, #21
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751a:	0bdb      	lsrs	r3, r3, #15
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800752e:	0b9b      	lsrs	r3, r3, #14
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007542:	0b5b      	lsrs	r3, r3, #13
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007556:	0b1b      	lsrs	r3, r3, #12
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	0a9b      	lsrs	r3, r3, #10
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	b2da      	uxtb	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	b2da      	uxtb	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	1fe00fff 	.word	0x1fe00fff

080075bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b094      	sub	sp, #80	; 0x50
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d101      	bne.n	80075dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0a7      	b.n	800772c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80075dc:	f107 0308 	add.w	r3, r7, #8
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb36 	bl	8007c54 <SD_SendSDStatus>
 80075e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80075ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d011      	beq.n	8007614 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <HAL_SD_GetCardStatus+0x178>)
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007612:	e070      	b.n	80076f6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	b29b      	uxth	r3, r3
 800763a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800763e:	b29a      	uxth	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	0e1b      	lsrs	r3, r3, #24
 8007644:	b29b      	uxth	r3, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	b29a      	uxth	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	061a      	lsls	r2, r3, #24
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800765a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007664:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	0a1b      	lsrs	r3, r3, #8
 800767c:	b2da      	uxtb	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	0d1b      	lsrs	r3, r3, #20
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	0c1b      	lsrs	r3, r3, #16
 8007696:	b29b      	uxth	r3, r3
 8007698:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800769c:	b29a      	uxth	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4313      	orrs	r3, r2
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	0a9b      	lsrs	r3, r3, #10
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	091b      	lsrs	r3, r3, #4
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	0e1b      	lsrs	r3, r3, #24
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 ffee 	bl	80096e0 <SDMMC_CmdBlockLength>
 8007704:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a08      	ldr	r2, [pc, #32]	; (8007734 <HAL_SD_GetCardStatus+0x178>)
 8007712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007718:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007728:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800772c:	4618      	mov	r0, r3
 800772e:	3750      	adds	r7, #80	; 0x50
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	1fe00fff 	.word	0x1fe00fff

08007738 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b08d      	sub	sp, #52	; 0x34
 800773c:	af02      	add	r7, sp, #8
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2203      	movs	r2, #3
 800774c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	2b03      	cmp	r3, #3
 8007756:	d02e      	beq.n	80077b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775e:	d106      	bne.n	800776e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007764:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	635a      	str	r2, [r3, #52]	; 0x34
 800776c:	e029      	b.n	80077c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007774:	d10a      	bne.n	800778c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb64 	bl	8007e44 <SD_WideBus_Enable>
 800777c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	635a      	str	r2, [r3, #52]	; 0x34
 800778a:	e01a      	b.n	80077c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fba1 	bl	8007eda <SD_WideBus_Disable>
 8007798:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	635a      	str	r2, [r3, #52]	; 0x34
 80077a6:	e00c      	b.n	80077c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	635a      	str	r2, [r3, #52]	; 0x34
 80077b4:	e005      	b.n	80077c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a5f      	ldr	r2, [pc, #380]	; (800794c <HAL_SD_ConfigWideBusOperation+0x214>)
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077d8:	e096      	b.n	8007908 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80077da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80077de:	f04f 0100 	mov.w	r1, #0
 80077e2:	f7fe f933 	bl	8005a4c <HAL_RCCEx_GetPeriphCLKFreq>
 80077e6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8083 	beq.w	80078f6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4950      	ldr	r1, [pc, #320]	; (8007950 <HAL_SD_ConfigWideBusOperation+0x218>)
 800780e:	fba1 1303 	umull	r1, r3, r1, r3
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	429a      	cmp	r2, r3
 8007816:	d303      	bcc.n	8007820 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e05a      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007828:	d103      	bne.n	8007832 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e051      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783a:	d126      	bne.n	800788a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10e      	bne.n	8007862 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4a43      	ldr	r2, [pc, #268]	; (8007954 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d906      	bls.n	800785a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4a40      	ldr	r2, [pc, #256]	; (8007950 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	0e5b      	lsrs	r3, r3, #25
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e03d      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	e039      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	fbb2 f3f3 	udiv	r3, r2, r3
 800786e:	4a39      	ldr	r2, [pc, #228]	; (8007954 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d906      	bls.n	8007882 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4a36      	ldr	r2, [pc, #216]	; (8007950 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	0e5b      	lsrs	r3, r3, #25
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	e029      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e025      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10e      	bne.n	80078b0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4a30      	ldr	r2, [pc, #192]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d906      	bls.n	80078a8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4a2c      	ldr	r2, [pc, #176]	; (8007950 <HAL_SD_ConfigWideBusOperation+0x218>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	0e1b      	lsrs	r3, r3, #24
 80078a4:	61bb      	str	r3, [r7, #24]
 80078a6:	e016      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e012      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	4a26      	ldr	r2, [pc, #152]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x220>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d906      	bls.n	80078d0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4a22      	ldr	r2, [pc, #136]	; (8007950 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0e1b      	lsrs	r3, r3, #24
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	e002      	b.n	80078d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681c      	ldr	r4, [r3, #0]
 80078da:	466a      	mov	r2, sp
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80078e8:	f107 0308 	add.w	r3, r7, #8
 80078ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078ee:	4620      	mov	r0, r4
 80078f0:	f001 fe2a 	bl	8009548 <SDMMC_Init>
 80078f4:	e008      	b.n	8007908 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fee5 	bl	80096e0 <SDMMC_CmdBlockLength>
 8007916:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a0a      	ldr	r2, [pc, #40]	; (800794c <HAL_SD_ConfigWideBusOperation+0x214>)
 8007924:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007944:	4618      	mov	r0, r3
 8007946:	372c      	adds	r7, #44	; 0x2c
 8007948:	46bd      	mov	sp, r7
 800794a:	bd90      	pop	{r4, r7, pc}
 800794c:	1fe00fff 	.word	0x1fe00fff
 8007950:	55e63b89 	.word	0x55e63b89
 8007954:	02faf080 	.word	0x02faf080
 8007958:	017d7840 	.word	0x017d7840

0800795c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007968:	f107 030c 	add.w	r3, r7, #12
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa40 	bl	8007df4 <SD_SendStatus>
 8007974:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	0a5b      	lsrs	r3, r3, #9
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007992:	693b      	ldr	r3, [r7, #16]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b090      	sub	sp, #64	; 0x40
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7fa fb06 	bl	8001fb8 <HAL_GetTick>
 80079ac:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fe10 	bl	80095d8 <SDMMC_GetPowerState>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80079c2:	e0b5      	b.n	8007b30 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d02e      	beq.n	8007a2a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 ff91 	bl	80098f8 <SDMMC_CmdSendCID>
 80079d6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <SD_InitCard+0x46>
    {
      return errorstate;
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	e0a6      	b.n	8007b30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fe3a 	bl	8009662 <SDMMC_GetResponse>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2104      	movs	r1, #4
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fe31 	bl	8009662 <SDMMC_GetResponse>
 8007a00:	4602      	mov	r2, r0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2108      	movs	r1, #8
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fe28 	bl	8009662 <SDMMC_GetResponse>
 8007a12:	4602      	mov	r2, r0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	210c      	movs	r1, #12
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 fe1f 	bl	8009662 <SDMMC_GetResponse>
 8007a24:	4602      	mov	r2, r0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d01d      	beq.n	8007a6e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007a32:	e019      	b.n	8007a68 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f107 020a 	add.w	r2, r7, #10
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 ff99 	bl	8009976 <SDMMC_CmdSetRelAdd>
 8007a44:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	e06f      	b.n	8007b30 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007a50:	f7fa fab2 	bl	8001fb8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3287 	movw	r2, #4999	; 0x1387
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d902      	bls.n	8007a68 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007a62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a66:	e063      	b.n	8007b30 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007a68:	897b      	ldrh	r3, [r7, #10]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0e2      	beq.n	8007a34 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d036      	beq.n	8007ae4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a76:	897b      	ldrh	r3, [r7, #10]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	041b      	lsls	r3, r3, #16
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f001 ff53 	bl	8009936 <SDMMC_CmdSendCSD>
 8007a90:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <SD_InitCard+0x100>
    {
      return errorstate;
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	e049      	b.n	8007b30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 fddd 	bl	8009662 <SDMMC_GetResponse>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fdd4 	bl	8009662 <SDMMC_GetResponse>
 8007aba:	4602      	mov	r2, r0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fdcb 	bl	8009662 <SDMMC_GetResponse>
 8007acc:	4602      	mov	r2, r0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	210c      	movs	r1, #12
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fdc2 	bl	8009662 <SDMMC_GetResponse>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2104      	movs	r1, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fdb9 	bl	8009662 <SDMMC_GetResponse>
 8007af0:	4603      	mov	r3, r0
 8007af2:	0d1a      	lsrs	r2, r3, #20
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fbb8 	bl	8007274 <HAL_SD_GetCardCSD>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b0e:	e00f      	b.n	8007b30 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f001 fe02 	bl	8009726 <SDMMC_CmdSelDesel>
 8007b22:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <SD_InitCard+0x192>
  {
    return errorstate;
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	e000      	b.n	8007b30 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3740      	adds	r7, #64	; 0x40
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 fe0b 	bl	800976c <SDMMC_CmdGoIdleState>
 8007b56:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	e072      	b.n	8007c48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fe1e 	bl	80097a8 <SDMMC_CmdOperCond>
 8007b6c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b74:	d10d      	bne.n	8007b92 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fdf3 	bl	800976c <SDMMC_CmdGoIdleState>
 8007b86:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <SD_PowerON+0x60>
    {
      return errorstate;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	e05a      	b.n	8007c48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d137      	bne.n	8007c10 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fe1e 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007bac:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d02d      	beq.n	8007c10 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bb8:	e046      	b.n	8007c48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fe11 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007bc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	e03a      	b.n	8007c48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	491e      	ldr	r1, [pc, #120]	; (8007c50 <SD_PowerON+0x118>)
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 fe28 	bl	800982e <SDMMC_CmdAppOperCommand>
 8007bde:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007be6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bea:	e02d      	b.n	8007c48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fd35 	bl	8009662 <SDMMC_GetResponse>
 8007bf8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	0fdb      	lsrs	r3, r3, #31
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <SD_PowerON+0xce>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <SD_PowerON+0xd0>
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]

    count++;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d802      	bhi.n	8007c20 <SD_PowerON+0xe8>
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0cc      	beq.n	8007bba <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d902      	bls.n	8007c30 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c2e:	e00b      	b.n	8007c48 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	c1100000 	.word	0xc1100000

08007c54 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08c      	sub	sp, #48	; 0x30
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c5e:	f7fa f9ab 	bl	8001fb8 <HAL_GetTick>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fcf7 	bl	8009662 <SDMMC_GetResponse>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c7e:	d102      	bne.n	8007c86 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c84:	e0b0      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2140      	movs	r1, #64	; 0x40
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fd27 	bl	80096e0 <SDMMC_CmdBlockLength>
 8007c92:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	e0a0      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	041b      	lsls	r3, r3, #16
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f001 fd98 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007cb8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	e08d      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007cd6:	2360      	movs	r3, #96	; 0x60
 8007cd8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f107 0208 	add.w	r2, r7, #8
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fcc9 	bl	8009688 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fe80 	bl	8009a00 <SDMMC_CmdStatusRegister>
 8007d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02b      	beq.n	8007d60 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	e069      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d013      	beq.n	8007d4a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007d22:	2300      	movs	r3, #0
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d26:	e00d      	b.n	8007d44 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fc35 	bl	800959c <SDMMC_ReadFIFO>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	601a      	str	r2, [r3, #0]
        pData++;
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	3301      	adds	r3, #1
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	2b07      	cmp	r3, #7
 8007d48:	d9ee      	bls.n	8007d28 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d4a:	f7fa f935 	bl	8001fb8 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d102      	bne.n	8007d60 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d5e:	e043      	b.n	8007de8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d66:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0d2      	beq.n	8007d14 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	e033      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e02a      	b.n	8007de8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007da0:	2320      	movs	r3, #32
 8007da2:	e021      	b.n	8007de8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fbf7 	bl	800959c <SDMMC_ReadFIFO>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	601a      	str	r2, [r3, #0]
    pData++;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	3304      	adds	r3, #4
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dba:	f7fa f8fd 	bl	8001fb8 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d102      	bne.n	8007dd0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dce:	e00b      	b.n	8007de8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e2      	bne.n	8007da4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a03      	ldr	r2, [pc, #12]	; (8007df0 <SD_SendSDStatus+0x19c>)
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3730      	adds	r7, #48	; 0x30
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	18000f3a 	.word	0x18000f3a

08007df4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e08:	e018      	b.n	8007e3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f001 fdcf 	bl	80099ba <SDMMC_CmdSendStatus>
 8007e1c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e009      	b.n	8007e3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 fc17 	bl	8009662 <SDMMC_GetResponse>
 8007e34:	4602      	mov	r2, r0
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fc01 	bl	8009662 <SDMMC_GetResponse>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e6a:	d102      	bne.n	8007e72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e70:	e02f      	b.n	8007ed2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e72:	f107 030c 	add.w	r3, r7, #12
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f879 	bl	8007f70 <SD_FindSCR>
 8007e7e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	e023      	b.n	8007ed2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01c      	beq.n	8007ece <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f001 fca1 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007ea6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	e00f      	b.n	8007ed2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fcd8 	bl	800986e <SDMMC_CmdBusWidth>
 8007ebe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	e003      	b.n	8007ed2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e001      	b.n	8007ed2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ece:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 fbb6 	bl	8009662 <SDMMC_GetResponse>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f00:	d102      	bne.n	8007f08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f06:	e02f      	b.n	8007f68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f08:	f107 030c 	add.w	r3, r7, #12
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f82e 	bl	8007f70 <SD_FindSCR>
 8007f14:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	e023      	b.n	8007f68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01c      	beq.n	8007f64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f32:	041b      	lsls	r3, r3, #16
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f001 fc56 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007f3c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	e00f      	b.n	8007f68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fc8d 	bl	800986e <SDMMC_CmdBusWidth>
 8007f54:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	e003      	b.n	8007f68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e001      	b.n	8007f68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08e      	sub	sp, #56	; 0x38
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f7a:	f7fa f81d 	bl	8001fb8 <HAL_GetTick>
 8007f7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007f84:	2300      	movs	r3, #0
 8007f86:	60bb      	str	r3, [r7, #8]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2108      	movs	r1, #8
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fba2 	bl	80096e0 <SDMMC_CmdBlockLength>
 8007f9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	e0ad      	b.n	8008104 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb0:	041b      	lsls	r3, r3, #16
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f001 fc17 	bl	80097e8 <SDMMC_CmdAppCommand>
 8007fba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	e09e      	b.n	8008104 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007fcc:	2308      	movs	r3, #8
 8007fce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007fd0:	2330      	movs	r3, #48	; 0x30
 8007fd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f107 0210 	add.w	r2, r7, #16
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 fb4c 	bl	8009688 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fc5d 	bl	80098b4 <SDMMC_CmdSendSCR>
 8007ffa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d027      	beq.n	8008052 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	e07e      	b.n	8008104 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d113      	bne.n	800803c <SD_FindSCR+0xcc>
 8008014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008016:	2b00      	cmp	r3, #0
 8008018:	d110      	bne.n	800803c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fabc 	bl	800959c <SDMMC_ReadFIFO>
 8008024:	4603      	mov	r3, r0
 8008026:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f001 fab5 	bl	800959c <SDMMC_ReadFIFO>
 8008032:	4603      	mov	r3, r0
 8008034:	60fb      	str	r3, [r7, #12]
      index++;
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	3301      	adds	r3, #1
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800803c:	f7f9 ffbc 	bl	8001fb8 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d102      	bne.n	8008052 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800804c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008050:	e058      	b.n	8008104 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008058:	f240 532a 	movw	r3, #1322	; 0x52a
 800805c:	4013      	ands	r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0d1      	beq.n	8008006 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2208      	movs	r2, #8
 8008076:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008078:	2308      	movs	r3, #8
 800807a:	e043      	b.n	8008104 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2202      	movs	r2, #2
 8008090:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008092:	2302      	movs	r3, #2
 8008094:	e036      	b.n	8008104 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2220      	movs	r2, #32
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80080ac:	2320      	movs	r3, #32
 80080ae:	e029      	b.n	8008104 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <SD_FindSCR+0x19c>)
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	061a      	lsls	r2, r3, #24
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	0e1b      	lsrs	r3, r3, #24
 80080d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	601a      	str	r2, [r3, #0]
    scr++;
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	3304      	adds	r3, #4
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	061a      	lsls	r2, r3, #24
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80080f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	0e1b      	lsrs	r3, r3, #24
 80080fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3738      	adds	r7, #56	; 0x38
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	18000f3a 	.word	0x18000f3a

08008110 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e10f      	b.n	8008342 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a87      	ldr	r2, [pc, #540]	; (800834c <HAL_SPI_Init+0x23c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00f      	beq.n	8008152 <HAL_SPI_Init+0x42>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a86      	ldr	r2, [pc, #536]	; (8008350 <HAL_SPI_Init+0x240>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00a      	beq.n	8008152 <HAL_SPI_Init+0x42>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a84      	ldr	r2, [pc, #528]	; (8008354 <HAL_SPI_Init+0x244>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d005      	beq.n	8008152 <HAL_SPI_Init+0x42>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b0f      	cmp	r3, #15
 800814c:	d901      	bls.n	8008152 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e0f7      	b.n	8008342 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f900 	bl	8008358 <SPI_GetPacketSize>
 8008158:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a7b      	ldr	r2, [pc, #492]	; (800834c <HAL_SPI_Init+0x23c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00c      	beq.n	800817e <HAL_SPI_Init+0x6e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a79      	ldr	r2, [pc, #484]	; (8008350 <HAL_SPI_Init+0x240>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <HAL_SPI_Init+0x6e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a78      	ldr	r2, [pc, #480]	; (8008354 <HAL_SPI_Init+0x244>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d002      	beq.n	800817e <HAL_SPI_Init+0x6e>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b08      	cmp	r3, #8
 800817c:	d811      	bhi.n	80081a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008182:	4a72      	ldr	r2, [pc, #456]	; (800834c <HAL_SPI_Init+0x23c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a70      	ldr	r2, [pc, #448]	; (8008350 <HAL_SPI_Init+0x240>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_SPI_Init+0x8c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a6f      	ldr	r2, [pc, #444]	; (8008354 <HAL_SPI_Init+0x244>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d104      	bne.n	80081a6 <HAL_SPI_Init+0x96>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d901      	bls.n	80081a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e0cd      	b.n	8008342 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7f9 fb8c 	bl	80018d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80081e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081ec:	d119      	bne.n	8008222 <HAL_SPI_Init+0x112>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f6:	d103      	bne.n	8008200 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10c      	bne.n	8008222 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800820c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008210:	d107      	bne.n	8008222 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008220:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00f      	beq.n	800824e <HAL_SPI_Init+0x13e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b06      	cmp	r3, #6
 8008234:	d90b      	bls.n	800824e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e007      	b.n	800825e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800825c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	431a      	orrs	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	ea42 0103 	orr.w	r1, r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082be:	ea42 0103 	orr.w	r1, r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d113      	bne.n	80082fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0201 	bic.w	r2, r2, #1
 800830c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40013000 	.word	0x40013000
 8008350:	40003800 	.word	0x40003800
 8008354:	40003c00 	.word	0x40003c00

08008358 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3307      	adds	r3, #7
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e042      	b.n	8008426 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7f9 fb70 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	; 0x24
 80083bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0201 	bic.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fd91 	bl	8008f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f826 	bl	8008430 <UART_SetConfig>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e01b      	b.n	8008426 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800840c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fe10 	bl	8009044 <UART_CheckIdleState>
 8008424:	4603      	mov	r3, r0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008434:	b092      	sub	sp, #72	; 0x48
 8008436:	af00      	add	r7, sp, #0
 8008438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	431a      	orrs	r2, r3
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	431a      	orrs	r2, r3
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4313      	orrs	r3, r2
 8008456:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4bbe      	ldr	r3, [pc, #760]	; (8008758 <UART_SetConfig+0x328>)
 8008460:	4013      	ands	r3, r2
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008468:	430b      	orrs	r3, r1
 800846a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4ab3      	ldr	r2, [pc, #716]	; (800875c <UART_SetConfig+0x32c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008498:	4313      	orrs	r3, r2
 800849a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	4baf      	ldr	r3, [pc, #700]	; (8008760 <UART_SetConfig+0x330>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	f023 010f 	bic.w	r1, r3, #15
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4aa6      	ldr	r2, [pc, #664]	; (8008764 <UART_SetConfig+0x334>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d177      	bne.n	80085c0 <UART_SetConfig+0x190>
 80084d0:	4ba5      	ldr	r3, [pc, #660]	; (8008768 <UART_SetConfig+0x338>)
 80084d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084d8:	2b28      	cmp	r3, #40	; 0x28
 80084da:	d86d      	bhi.n	80085b8 <UART_SetConfig+0x188>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <UART_SetConfig+0xb4>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008589 	.word	0x08008589
 80084e8:	080085b9 	.word	0x080085b9
 80084ec:	080085b9 	.word	0x080085b9
 80084f0:	080085b9 	.word	0x080085b9
 80084f4:	080085b9 	.word	0x080085b9
 80084f8:	080085b9 	.word	0x080085b9
 80084fc:	080085b9 	.word	0x080085b9
 8008500:	080085b9 	.word	0x080085b9
 8008504:	08008591 	.word	0x08008591
 8008508:	080085b9 	.word	0x080085b9
 800850c:	080085b9 	.word	0x080085b9
 8008510:	080085b9 	.word	0x080085b9
 8008514:	080085b9 	.word	0x080085b9
 8008518:	080085b9 	.word	0x080085b9
 800851c:	080085b9 	.word	0x080085b9
 8008520:	080085b9 	.word	0x080085b9
 8008524:	08008599 	.word	0x08008599
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085b9 	.word	0x080085b9
 8008530:	080085b9 	.word	0x080085b9
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085a1 	.word	0x080085a1
 8008548:	080085b9 	.word	0x080085b9
 800854c:	080085b9 	.word	0x080085b9
 8008550:	080085b9 	.word	0x080085b9
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085b9 	.word	0x080085b9
 800855c:	080085b9 	.word	0x080085b9
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085b9 	.word	0x080085b9
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085b9 	.word	0x080085b9
 800857c:	080085b9 	.word	0x080085b9
 8008580:	080085b9 	.word	0x080085b9
 8008584:	080085b1 	.word	0x080085b1
 8008588:	2301      	movs	r3, #1
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e222      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e21e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e21a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e216      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085a8:	2320      	movs	r3, #32
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e212      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e20e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e20a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a69      	ldr	r2, [pc, #420]	; (800876c <UART_SetConfig+0x33c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d130      	bne.n	800862c <UART_SetConfig+0x1fc>
 80085ca:	4b67      	ldr	r3, [pc, #412]	; (8008768 <UART_SetConfig+0x338>)
 80085cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d826      	bhi.n	8008624 <UART_SetConfig+0x1f4>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <UART_SetConfig+0x1ac>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085f5 	.word	0x080085f5
 80085e0:	080085fd 	.word	0x080085fd
 80085e4:	08008605 	.word	0x08008605
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	08008615 	.word	0x08008615
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e1ec      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e1e8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e1e4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e1e0      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008614:	2320      	movs	r3, #32
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e1dc      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e1d8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e1d4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a4f      	ldr	r2, [pc, #316]	; (8008770 <UART_SetConfig+0x340>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d130      	bne.n	8008698 <UART_SetConfig+0x268>
 8008636:	4b4c      	ldr	r3, [pc, #304]	; (8008768 <UART_SetConfig+0x338>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b05      	cmp	r3, #5
 8008640:	d826      	bhi.n	8008690 <UART_SetConfig+0x260>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x218>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008661 	.word	0x08008661
 800864c:	08008669 	.word	0x08008669
 8008650:	08008671 	.word	0x08008671
 8008654:	08008679 	.word	0x08008679
 8008658:	08008681 	.word	0x08008681
 800865c:	08008689 	.word	0x08008689
 8008660:	2300      	movs	r3, #0
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e1b6      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e1b2      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e1ae      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e1aa      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008680:	2320      	movs	r3, #32
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e1a6      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008688:	2340      	movs	r3, #64	; 0x40
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e1a2      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e19e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a35      	ldr	r2, [pc, #212]	; (8008774 <UART_SetConfig+0x344>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d130      	bne.n	8008704 <UART_SetConfig+0x2d4>
 80086a2:	4b31      	ldr	r3, [pc, #196]	; (8008768 <UART_SetConfig+0x338>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d826      	bhi.n	80086fc <UART_SetConfig+0x2cc>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x284>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e180      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e17c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e178      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e174      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086ec:	2320      	movs	r3, #32
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e170      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e16c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e168      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1b      	ldr	r2, [pc, #108]	; (8008778 <UART_SetConfig+0x348>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d142      	bne.n	8008794 <UART_SetConfig+0x364>
 800870e:	4b16      	ldr	r3, [pc, #88]	; (8008768 <UART_SetConfig+0x338>)
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b05      	cmp	r3, #5
 8008718:	d838      	bhi.n	800878c <UART_SetConfig+0x35c>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x2f0>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008739 	.word	0x08008739
 8008724:	08008741 	.word	0x08008741
 8008728:	08008749 	.word	0x08008749
 800872c:	08008751 	.word	0x08008751
 8008730:	0800877d 	.word	0x0800877d
 8008734:	08008785 	.word	0x08008785
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e14a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e146      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e142      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e13e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008758:	cfff69f3 	.word	0xcfff69f3
 800875c:	58000c00 	.word	0x58000c00
 8008760:	11fff4ff 	.word	0x11fff4ff
 8008764:	40011000 	.word	0x40011000
 8008768:	58024400 	.word	0x58024400
 800876c:	40004400 	.word	0x40004400
 8008770:	40004800 	.word	0x40004800
 8008774:	40004c00 	.word	0x40004c00
 8008778:	40005000 	.word	0x40005000
 800877c:	2320      	movs	r3, #32
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e128      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008784:	2340      	movs	r3, #64	; 0x40
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e124      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800878c:	2380      	movs	r3, #128	; 0x80
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e120      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4acb      	ldr	r2, [pc, #812]	; (8008ac8 <UART_SetConfig+0x698>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d176      	bne.n	800888c <UART_SetConfig+0x45c>
 800879e:	4bcb      	ldr	r3, [pc, #812]	; (8008acc <UART_SetConfig+0x69c>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a6:	2b28      	cmp	r3, #40	; 0x28
 80087a8:	d86c      	bhi.n	8008884 <UART_SetConfig+0x454>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <UART_SetConfig+0x380>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008855 	.word	0x08008855
 80087b4:	08008885 	.word	0x08008885
 80087b8:	08008885 	.word	0x08008885
 80087bc:	08008885 	.word	0x08008885
 80087c0:	08008885 	.word	0x08008885
 80087c4:	08008885 	.word	0x08008885
 80087c8:	08008885 	.word	0x08008885
 80087cc:	08008885 	.word	0x08008885
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	08008885 	.word	0x08008885
 80087d8:	08008885 	.word	0x08008885
 80087dc:	08008885 	.word	0x08008885
 80087e0:	08008885 	.word	0x08008885
 80087e4:	08008885 	.word	0x08008885
 80087e8:	08008885 	.word	0x08008885
 80087ec:	08008885 	.word	0x08008885
 80087f0:	08008865 	.word	0x08008865
 80087f4:	08008885 	.word	0x08008885
 80087f8:	08008885 	.word	0x08008885
 80087fc:	08008885 	.word	0x08008885
 8008800:	08008885 	.word	0x08008885
 8008804:	08008885 	.word	0x08008885
 8008808:	08008885 	.word	0x08008885
 800880c:	08008885 	.word	0x08008885
 8008810:	0800886d 	.word	0x0800886d
 8008814:	08008885 	.word	0x08008885
 8008818:	08008885 	.word	0x08008885
 800881c:	08008885 	.word	0x08008885
 8008820:	08008885 	.word	0x08008885
 8008824:	08008885 	.word	0x08008885
 8008828:	08008885 	.word	0x08008885
 800882c:	08008885 	.word	0x08008885
 8008830:	08008875 	.word	0x08008875
 8008834:	08008885 	.word	0x08008885
 8008838:	08008885 	.word	0x08008885
 800883c:	08008885 	.word	0x08008885
 8008840:	08008885 	.word	0x08008885
 8008844:	08008885 	.word	0x08008885
 8008848:	08008885 	.word	0x08008885
 800884c:	08008885 	.word	0x08008885
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e0bc      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e0b8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e0b4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e0b0      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008874:	2320      	movs	r3, #32
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887a:	e0ac      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800887c:	2340      	movs	r3, #64	; 0x40
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e0a8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e0a4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a8f      	ldr	r2, [pc, #572]	; (8008ad0 <UART_SetConfig+0x6a0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d130      	bne.n	80088f8 <UART_SetConfig+0x4c8>
 8008896:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <UART_SetConfig+0x69c>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d826      	bhi.n	80088f0 <UART_SetConfig+0x4c0>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x478>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e086      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e082      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e07e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e07a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088e0:	2320      	movs	r3, #32
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e076      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e072      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088f0:	2380      	movs	r3, #128	; 0x80
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e06e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a75      	ldr	r2, [pc, #468]	; (8008ad4 <UART_SetConfig+0x6a4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d130      	bne.n	8008964 <UART_SetConfig+0x534>
 8008902:	4b72      	ldr	r3, [pc, #456]	; (8008acc <UART_SetConfig+0x69c>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b05      	cmp	r3, #5
 800890c:	d826      	bhi.n	800895c <UART_SetConfig+0x52c>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <UART_SetConfig+0x4e4>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008955 	.word	0x08008955
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e050      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e04c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e048      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e044      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800894c:	2320      	movs	r3, #32
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008952:	e040      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008954:	2340      	movs	r3, #64	; 0x40
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e03c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800895c:	2380      	movs	r3, #128	; 0x80
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e038      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a5b      	ldr	r2, [pc, #364]	; (8008ad8 <UART_SetConfig+0x6a8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d130      	bne.n	80089d0 <UART_SetConfig+0x5a0>
 800896e:	4b57      	ldr	r3, [pc, #348]	; (8008acc <UART_SetConfig+0x69c>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b05      	cmp	r3, #5
 8008978:	d826      	bhi.n	80089c8 <UART_SetConfig+0x598>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <UART_SetConfig+0x550>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008999 	.word	0x08008999
 8008984:	080089a1 	.word	0x080089a1
 8008988:	080089a9 	.word	0x080089a9
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089c1 	.word	0x080089c1
 8008998:	2302      	movs	r3, #2
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e01a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089a0:	2304      	movs	r3, #4
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e016      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089a8:	2308      	movs	r3, #8
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e012      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e00e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089b8:	2320      	movs	r3, #32
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e00a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e006      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e002      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089d0:	2380      	movs	r3, #128	; 0x80
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3f      	ldr	r2, [pc, #252]	; (8008ad8 <UART_SetConfig+0x6a8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	f040 80f8 	bne.w	8008bd2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	dc46      	bgt.n	8008a78 <UART_SetConfig+0x648>
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	f2c0 8082 	blt.w	8008af4 <UART_SetConfig+0x6c4>
 80089f0:	3b02      	subs	r3, #2
 80089f2:	2b1e      	cmp	r3, #30
 80089f4:	d87e      	bhi.n	8008af4 <UART_SetConfig+0x6c4>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x5cc>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a7f 	.word	0x08008a7f
 8008a00:	08008af5 	.word	0x08008af5
 8008a04:	08008a87 	.word	0x08008a87
 8008a08:	08008af5 	.word	0x08008af5
 8008a0c:	08008af5 	.word	0x08008af5
 8008a10:	08008af5 	.word	0x08008af5
 8008a14:	08008a97 	.word	0x08008a97
 8008a18:	08008af5 	.word	0x08008af5
 8008a1c:	08008af5 	.word	0x08008af5
 8008a20:	08008af5 	.word	0x08008af5
 8008a24:	08008af5 	.word	0x08008af5
 8008a28:	08008af5 	.word	0x08008af5
 8008a2c:	08008af5 	.word	0x08008af5
 8008a30:	08008af5 	.word	0x08008af5
 8008a34:	08008aa7 	.word	0x08008aa7
 8008a38:	08008af5 	.word	0x08008af5
 8008a3c:	08008af5 	.word	0x08008af5
 8008a40:	08008af5 	.word	0x08008af5
 8008a44:	08008af5 	.word	0x08008af5
 8008a48:	08008af5 	.word	0x08008af5
 8008a4c:	08008af5 	.word	0x08008af5
 8008a50:	08008af5 	.word	0x08008af5
 8008a54:	08008af5 	.word	0x08008af5
 8008a58:	08008af5 	.word	0x08008af5
 8008a5c:	08008af5 	.word	0x08008af5
 8008a60:	08008af5 	.word	0x08008af5
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008ae7 	.word	0x08008ae7
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	d037      	beq.n	8008aec <UART_SetConfig+0x6bc>
 8008a7c:	e03a      	b.n	8008af4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a7e:	f7fd fd65 	bl	800654c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a84:	e03c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fd fd74 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a94:	e034      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fd fec0 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa4:	e02c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <UART_SetConfig+0x69c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d016      	beq.n	8008ae0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab2:	4b06      	ldr	r3, [pc, #24]	; (8008acc <UART_SetConfig+0x69c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	4a07      	ldr	r2, [pc, #28]	; (8008adc <UART_SetConfig+0x6ac>)
 8008abe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac4:	e01c      	b.n	8008b00 <UART_SetConfig+0x6d0>
 8008ac6:	bf00      	nop
 8008ac8:	40011400 	.word	0x40011400
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	40007800 	.word	0x40007800
 8008ad4:	40007c00 	.word	0x40007c00
 8008ad8:	58000c00 	.word	0x58000c00
 8008adc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ae0:	4b9d      	ldr	r3, [pc, #628]	; (8008d58 <UART_SetConfig+0x928>)
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae4:	e00c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae6:	4b9d      	ldr	r3, [pc, #628]	; (8008d5c <UART_SetConfig+0x92c>)
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aea:	e009      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af2:	e005      	b.n	8008b00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008afe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 81de 	beq.w	8008ec4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	4a94      	ldr	r2, [pc, #592]	; (8008d60 <UART_SetConfig+0x930>)
 8008b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	4413      	add	r3, r2
 8008b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d305      	bcc.n	8008b38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d903      	bls.n	8008b40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b3e:	e1c1      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b42:	2200      	movs	r2, #0
 8008b44:	60bb      	str	r3, [r7, #8]
 8008b46:	60fa      	str	r2, [r7, #12]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	4a84      	ldr	r2, [pc, #528]	; (8008d60 <UART_SetConfig+0x930>)
 8008b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2200      	movs	r2, #0
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b62:	f7f7 fbb9 	bl	80002d8 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	020b      	lsls	r3, r1, #8
 8008b78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b7c:	0202      	lsls	r2, r0, #8
 8008b7e:	6979      	ldr	r1, [r7, #20]
 8008b80:	6849      	ldr	r1, [r1, #4]
 8008b82:	0849      	lsrs	r1, r1, #1
 8008b84:	2000      	movs	r0, #0
 8008b86:	460c      	mov	r4, r1
 8008b88:	4605      	mov	r5, r0
 8008b8a:	eb12 0804 	adds.w	r8, r2, r4
 8008b8e:	eb43 0905 	adc.w	r9, r3, r5
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	469a      	mov	sl, r3
 8008b9a:	4693      	mov	fp, r2
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	f7f7 fb98 	bl	80002d8 <__aeabi_uldivmod>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4613      	mov	r3, r2
 8008bae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb6:	d308      	bcc.n	8008bca <UART_SetConfig+0x79a>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bbe:	d204      	bcs.n	8008bca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	e17c      	b.n	8008ec4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bd0:	e178      	b.n	8008ec4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bda:	f040 80c5 	bne.w	8008d68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008bde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	dc48      	bgt.n	8008c78 <UART_SetConfig+0x848>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	db7b      	blt.n	8008ce2 <UART_SetConfig+0x8b2>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d879      	bhi.n	8008ce2 <UART_SetConfig+0x8b2>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <UART_SetConfig+0x7c4>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c7f 	.word	0x08008c7f
 8008bf8:	08008c87 	.word	0x08008c87
 8008bfc:	08008ce3 	.word	0x08008ce3
 8008c00:	08008ce3 	.word	0x08008ce3
 8008c04:	08008c8f 	.word	0x08008c8f
 8008c08:	08008ce3 	.word	0x08008ce3
 8008c0c:	08008ce3 	.word	0x08008ce3
 8008c10:	08008ce3 	.word	0x08008ce3
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008ce3 	.word	0x08008ce3
 8008c1c:	08008ce3 	.word	0x08008ce3
 8008c20:	08008ce3 	.word	0x08008ce3
 8008c24:	08008ce3 	.word	0x08008ce3
 8008c28:	08008ce3 	.word	0x08008ce3
 8008c2c:	08008ce3 	.word	0x08008ce3
 8008c30:	08008ce3 	.word	0x08008ce3
 8008c34:	08008caf 	.word	0x08008caf
 8008c38:	08008ce3 	.word	0x08008ce3
 8008c3c:	08008ce3 	.word	0x08008ce3
 8008c40:	08008ce3 	.word	0x08008ce3
 8008c44:	08008ce3 	.word	0x08008ce3
 8008c48:	08008ce3 	.word	0x08008ce3
 8008c4c:	08008ce3 	.word	0x08008ce3
 8008c50:	08008ce3 	.word	0x08008ce3
 8008c54:	08008ce3 	.word	0x08008ce3
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008ce3 	.word	0x08008ce3
 8008c60:	08008ce3 	.word	0x08008ce3
 8008c64:	08008ce3 	.word	0x08008ce3
 8008c68:	08008ce3 	.word	0x08008ce3
 8008c6c:	08008ce3 	.word	0x08008ce3
 8008c70:	08008ce3 	.word	0x08008ce3
 8008c74:	08008cd5 	.word	0x08008cd5
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d02e      	beq.n	8008cda <UART_SetConfig+0x8aa>
 8008c7c:	e031      	b.n	8008ce2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c7e:	f7fb fcaf 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8008c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c84:	e033      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c86:	f7fb fcc1 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8008c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c8c:	e02f      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd fc70 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c9c:	e027      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 0318 	add.w	r3, r7, #24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fdbc 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cac:	e01f      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cae:	4b2d      	ldr	r3, [pc, #180]	; (8008d64 <UART_SetConfig+0x934>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cba:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <UART_SetConfig+0x934>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	08db      	lsrs	r3, r3, #3
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <UART_SetConfig+0x928>)
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ccc:	e00f      	b.n	8008cee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cce:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <UART_SetConfig+0x928>)
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd2:	e00c      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <UART_SetConfig+0x92c>)
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd8:	e009      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce0:	e005      	b.n	8008cee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80e7 	beq.w	8008ec4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <UART_SetConfig+0x930>)
 8008cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d08:	005a      	lsls	r2, r3, #1
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	441a      	add	r2, r3
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	d916      	bls.n	8008d50 <UART_SetConfig+0x920>
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d28:	d212      	bcs.n	8008d50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f023 030f 	bic.w	r3, r3, #15
 8008d32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d42:	4313      	orrs	r3, r2
 8008d44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e0b9      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d56:	e0b5      	b.n	8008ec4 <UART_SetConfig+0xa94>
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	0800a00c 	.word	0x0800a00c
 8008d64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	dc49      	bgt.n	8008e04 <UART_SetConfig+0x9d4>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db7c      	blt.n	8008e6e <UART_SetConfig+0xa3e>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d87a      	bhi.n	8008e6e <UART_SetConfig+0xa3e>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x950>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008e0b 	.word	0x08008e0b
 8008d84:	08008e13 	.word	0x08008e13
 8008d88:	08008e6f 	.word	0x08008e6f
 8008d8c:	08008e6f 	.word	0x08008e6f
 8008d90:	08008e1b 	.word	0x08008e1b
 8008d94:	08008e6f 	.word	0x08008e6f
 8008d98:	08008e6f 	.word	0x08008e6f
 8008d9c:	08008e6f 	.word	0x08008e6f
 8008da0:	08008e2b 	.word	0x08008e2b
 8008da4:	08008e6f 	.word	0x08008e6f
 8008da8:	08008e6f 	.word	0x08008e6f
 8008dac:	08008e6f 	.word	0x08008e6f
 8008db0:	08008e6f 	.word	0x08008e6f
 8008db4:	08008e6f 	.word	0x08008e6f
 8008db8:	08008e6f 	.word	0x08008e6f
 8008dbc:	08008e6f 	.word	0x08008e6f
 8008dc0:	08008e3b 	.word	0x08008e3b
 8008dc4:	08008e6f 	.word	0x08008e6f
 8008dc8:	08008e6f 	.word	0x08008e6f
 8008dcc:	08008e6f 	.word	0x08008e6f
 8008dd0:	08008e6f 	.word	0x08008e6f
 8008dd4:	08008e6f 	.word	0x08008e6f
 8008dd8:	08008e6f 	.word	0x08008e6f
 8008ddc:	08008e6f 	.word	0x08008e6f
 8008de0:	08008e6f 	.word	0x08008e6f
 8008de4:	08008e6f 	.word	0x08008e6f
 8008de8:	08008e6f 	.word	0x08008e6f
 8008dec:	08008e6f 	.word	0x08008e6f
 8008df0:	08008e6f 	.word	0x08008e6f
 8008df4:	08008e6f 	.word	0x08008e6f
 8008df8:	08008e6f 	.word	0x08008e6f
 8008dfc:	08008e6f 	.word	0x08008e6f
 8008e00:	08008e61 	.word	0x08008e61
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d02e      	beq.n	8008e66 <UART_SetConfig+0xa36>
 8008e08:	e031      	b.n	8008e6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0a:	f7fb fbe9 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8008e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e10:	e033      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e12:	f7fb fbfb 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8008e16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e18:	e02f      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fd fbaa 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e28:	e027      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2a:	f107 0318 	add.w	r3, r7, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fd fcf6 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e38:	e01f      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ef0 <UART_SetConfig+0xac0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e46:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <UART_SetConfig+0xac0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	08db      	lsrs	r3, r3, #3
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	4a28      	ldr	r2, [pc, #160]	; (8008ef4 <UART_SetConfig+0xac4>)
 8008e52:	fa22 f303 	lsr.w	r3, r2, r3
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e58:	e00f      	b.n	8008e7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e5a:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <UART_SetConfig+0xac4>)
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5e:	e00c      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e60:	4b25      	ldr	r3, [pc, #148]	; (8008ef8 <UART_SetConfig+0xac8>)
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e64:	e009      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6c:	e005      	b.n	8008e7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e78:	bf00      	nop
    }

    if (pclk != 0U)
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d021      	beq.n	8008ec4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <UART_SetConfig+0xacc>)
 8008e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	441a      	add	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d909      	bls.n	8008ebe <UART_SetConfig+0xa8e>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb0:	d205      	bcs.n	8008ebe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60da      	str	r2, [r3, #12]
 8008ebc:	e002      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ee0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3748      	adds	r7, #72	; 0x48
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	03d09000 	.word	0x03d09000
 8008ef8:	003d0900 	.word	0x003d0900
 8008efc:	0800a00c 	.word	0x0800a00c

08008f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01a      	beq.n	8009016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffe:	d10a      	bne.n	8009016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	605a      	str	r2, [r3, #4]
  }
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b098      	sub	sp, #96	; 0x60
 8009048:	af02      	add	r7, sp, #8
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009054:	f7f8 ffb0 	bl	8001fb8 <HAL_GetTick>
 8009058:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b08      	cmp	r3, #8
 8009066:	d12f      	bne.n	80090c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009070:	2200      	movs	r2, #0
 8009072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f88e 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d022      	beq.n	80090c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009096:	653b      	str	r3, [r7, #80]	; 0x50
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a0:	647b      	str	r3, [r7, #68]	; 0x44
 80090a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e063      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d149      	bne.n	800916a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f857 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d03c      	beq.n	800916a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	623b      	str	r3, [r7, #32]
   return(result);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	633b      	str	r3, [r7, #48]	; 0x30
 8009110:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60fb      	str	r3, [r7, #12]
   return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	64bb      	str	r3, [r7, #72]	; 0x48
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009142:	61fa      	str	r2, [r7, #28]
 8009144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	617b      	str	r3, [r7, #20]
   return(result);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e012      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3758      	adds	r7, #88	; 0x58
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a8:	e04f      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d04b      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b2:	f7f8 ff01 	bl	8001fb8 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e04e      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d037      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b80      	cmp	r3, #128	; 0x80
 80091de:	d034      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b40      	cmp	r3, #64	; 0x40
 80091e4:	d031      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d110      	bne.n	8009216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2208      	movs	r2, #8
 80091fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f839 	bl	8009274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2208      	movs	r2, #8
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e029      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009224:	d111      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800922e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f81f 	bl	8009274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e00f      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	429a      	cmp	r2, r3
 8009258:	bf0c      	ite	eq
 800925a:	2301      	moveq	r3, #1
 800925c:	2300      	movne	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	429a      	cmp	r2, r3
 8009266:	d0a0      	beq.n	80091aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b095      	sub	sp, #84	; 0x54
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929a:	643b      	str	r3, [r7, #64]	; 0x40
 800929c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e6      	bne.n	800927c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	4b1e      	ldr	r3, [pc, #120]	; (800933c <UART_EndRxTransfer+0xc8>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d118      	bne.n	800931c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f023 0310 	bic.w	r3, r3, #16
 80092fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009308:	61bb      	str	r3, [r7, #24]
 800930a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6979      	ldr	r1, [r7, #20]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	613b      	str	r3, [r7, #16]
   return(result);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e6      	bne.n	80092ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009330:	bf00      	nop
 8009332:	3754      	adds	r7, #84	; 0x54
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	effffffe 	.word	0xeffffffe

08009340 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_UARTEx_DisableFifoMode+0x16>
 8009352:	2302      	movs	r3, #2
 8009354:	e027      	b.n	80093a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	; 0x24
 8009362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009384:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e02d      	b.n	8009426 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2224      	movs	r2, #36	; 0x24
 80093d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f850 	bl	80094ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009442:	2302      	movs	r3, #2
 8009444:	e02d      	b.n	80094a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2224      	movs	r2, #36	; 0x24
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f812 	bl	80094ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d108      	bne.n	80094ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094cc:	e031      	b.n	8009532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094ce:	2310      	movs	r3, #16
 80094d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094d2:	2310      	movs	r3, #16
 80094d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	0e5b      	lsrs	r3, r3, #25
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	0f5b      	lsrs	r3, r3, #29
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	7b3a      	ldrb	r2, [r7, #12]
 80094fa:	4911      	ldr	r1, [pc, #68]	; (8009540 <UARTEx_SetNbDataToProcess+0x94>)
 80094fc:	5c8a      	ldrb	r2, [r1, r2]
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009502:	7b3a      	ldrb	r2, [r7, #12]
 8009504:	490f      	ldr	r1, [pc, #60]	; (8009544 <UARTEx_SetNbDataToProcess+0x98>)
 8009506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009508:	fb93 f3f2 	sdiv	r3, r3, r2
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	7b7a      	ldrb	r2, [r7, #13]
 8009518:	4909      	ldr	r1, [pc, #36]	; (8009540 <UARTEx_SetNbDataToProcess+0x94>)
 800951a:	5c8a      	ldrb	r2, [r1, r2]
 800951c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009520:	7b7a      	ldrb	r2, [r7, #13]
 8009522:	4908      	ldr	r1, [pc, #32]	; (8009544 <UARTEx_SetNbDataToProcess+0x98>)
 8009524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009526:	fb93 f3f2 	sdiv	r3, r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	0800a024 	.word	0x0800a024
 8009544:	0800a02c 	.word	0x0800a02c

08009548 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009548:	b084      	sub	sp, #16
 800954a:	b480      	push	{r7}
 800954c:	b085      	sub	sp, #20
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	f107 001c 	add.w	r0, r7, #28
 8009556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800955e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009560:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009562:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800956a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800956e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	4b07      	ldr	r3, [pc, #28]	; (8009598 <SDMMC_Init+0x50>)
 800957c:	4013      	ands	r3, r2
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	b004      	add	sp, #16
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	ffc02c00 	.word	0xffc02c00

0800959c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f043 0203 	orr.w	r2, r3, #3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0303 	and.w	r3, r3, #3
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009612:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009618:	431a      	orrs	r2, r3
                       Command->CPSM);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800961e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <SDMMC_SendCommand+0x50>)
 800962c:	4013      	ands	r3, r2
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	fffee0c0 	.word	0xfffee0c0

08009648 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	b2db      	uxtb	r3, r3
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3314      	adds	r3, #20
 8009670:	461a      	mov	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	4413      	add	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80096b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80096ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0

}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80096ee:	2310      	movs	r3, #16
 80096f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ff73 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800970e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009712:	2110      	movs	r1, #16
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f995 	bl	8009a44 <SDMMC_GetCmdResp1>
 800971a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800971c:	69fb      	ldr	r3, [r7, #28]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3720      	adds	r7, #32
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b088      	sub	sp, #32
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009734:	2307      	movs	r3, #7
 8009736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800973c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800973e:	2300      	movs	r3, #0
 8009740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff ff50 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009754:	f241 3288 	movw	r2, #5000	; 0x1388
 8009758:	2107      	movs	r1, #7
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f972 	bl	8009a44 <SDMMC_GetCmdResp1>
 8009760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009762:	69fb      	ldr	r3, [r7, #28]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800977c:	2300      	movs	r3, #0
 800977e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff ff2f 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fb96 	bl	8009ec8 <SDMMC_GetCmdError>
 800979c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800979e:	69fb      	ldr	r3, [r7, #28]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80097b0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80097b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80097b6:	2308      	movs	r3, #8
 80097b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff ff0f 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fb28 	bl	8009e2c <SDMMC_GetCmdResp7>
 80097dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097de:	69fb      	ldr	r3, [r7, #28]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80097f6:	2337      	movs	r3, #55	; 0x37
 80097f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800980a:	f107 0308 	add.w	r3, r7, #8
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff feef 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009816:	f241 3288 	movw	r2, #5000	; 0x1388
 800981a:	2137      	movs	r1, #55	; 0x37
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f911 	bl	8009a44 <SDMMC_GetCmdResp1>
 8009822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009824:	69fb      	ldr	r3, [r7, #28]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b088      	sub	sp, #32
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800983c:	2329      	movs	r3, #41	; 0x29
 800983e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800984a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800984e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fecc 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa2d 	bl	8009cbc <SDMMC_GetCmdResp3>
 8009862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009864:	69fb      	ldr	r3, [r7, #28]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b088      	sub	sp, #32
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800987c:	2306      	movs	r3, #6
 800987e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800988a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800988e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009890:	f107 0308 	add.w	r3, r7, #8
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff feac 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800989c:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a0:	2106      	movs	r1, #6
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f8ce 	bl	8009a44 <SDMMC_GetCmdResp1>
 80098a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098aa:	69fb      	ldr	r3, [r7, #28]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80098c0:	2333      	movs	r3, #51	; 0x33
 80098c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098ca:	2300      	movs	r3, #0
 80098cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fe8a 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80098e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e4:	2133      	movs	r1, #51	; 0x33
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f8ac 	bl	8009a44 <SDMMC_GetCmdResp1>
 80098ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ee:	69fb      	ldr	r3, [r7, #28]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009904:	2302      	movs	r3, #2
 8009906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800990c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009918:	f107 0308 	add.w	r3, r7, #8
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff fe68 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f97f 	bl	8009c28 <SDMMC_GetCmdResp2>
 800992a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800992c:	69fb      	ldr	r3, [r7, #28]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3720      	adds	r7, #32
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b088      	sub	sp, #32
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009944:	2309      	movs	r3, #9
 8009946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009948:	f44f 7340 	mov.w	r3, #768	; 0x300
 800994c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009958:	f107 0308 	add.w	r3, r7, #8
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fe48 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f95f 	bl	8009c28 <SDMMC_GetCmdResp2>
 800996a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800996c:	69fb      	ldr	r3, [r7, #28]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b088      	sub	sp, #32
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009984:	2303      	movs	r3, #3
 8009986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800998c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fe28 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	2103      	movs	r1, #3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f9c7 	bl	8009d3c <SDMMC_GetCmdResp6>
 80099ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b0:	69fb      	ldr	r3, [r7, #28]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b088      	sub	sp, #32
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80099c8:	230d      	movs	r3, #13
 80099ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fe06 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80099e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ec:	210d      	movs	r1, #13
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f828 	bl	8009a44 <SDMMC_GetCmdResp1>
 80099f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f6:	69fb      	ldr	r3, [r7, #28]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009a0c:	230d      	movs	r3, #13
 8009a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a20:	f107 0308 	add.w	r3, r7, #8
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff fde4 	bl	80095f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a30:	210d      	movs	r1, #13
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f806 	bl	8009a44 <SDMMC_GetCmdResp1>
 8009a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a52:	4b70      	ldr	r3, [pc, #448]	; (8009c14 <SDMMC_GetCmdResp1+0x1d0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a70      	ldr	r2, [pc, #448]	; (8009c18 <SDMMC_GetCmdResp1+0x1d4>)
 8009a58:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5c:	0a5a      	lsrs	r2, r3, #9
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	1e5a      	subs	r2, r3, #1
 8009a6a:	61fa      	str	r2, [r7, #28]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a74:	e0c9      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	4b67      	ldr	r3, [pc, #412]	; (8009c1c <SDMMC_GetCmdResp1+0x1d8>)
 8009a80:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0ef      	beq.n	8009a66 <SDMMC_GetCmdResp1+0x22>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1ea      	bne.n	8009a66 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aa2:	2304      	movs	r3, #4
 8009aa4:	e0b1      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e0a6      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4a58      	ldr	r2, [pc, #352]	; (8009c20 <SDMMC_GetCmdResp1+0x1dc>)
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff fdc0 	bl	8009648 <SDMMC_GetCommandResponse>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d001      	beq.n	8009ad6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e099      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff fdc2 	bl	8009662 <SDMMC_GetResponse>
 8009ade:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	4b50      	ldr	r3, [pc, #320]	; (8009c24 <SDMMC_GetCmdResp1+0x1e0>)
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e08d      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da02      	bge.n	8009afa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009af8:	e087      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	e080      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b12:	2380      	movs	r3, #128	; 0x80
 8009b14:	e079      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b24:	e071      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b34:	e069      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b44:	e061      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b54:	e059      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b64:	e051      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b74:	e049      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b84:	e041      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b94:	e039      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ba4:	e031      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009bb4:	e029      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009bc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009bc4:	e021      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bd4:	e019      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009be4:	e011      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bf4:	e009      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c04:	e001      	b.n	8009c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	24000000 	.word	0x24000000
 8009c18:	10624dd3 	.word	0x10624dd3
 8009c1c:	00200045 	.word	0x00200045
 8009c20:	002000c5 	.word	0x002000c5
 8009c24:	fdffe008 	.word	0xfdffe008

08009c28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c30:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <SDMMC_GetCmdResp2+0x88>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <SDMMC_GetCmdResp2+0x8c>)
 8009c36:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3a:	0a5b      	lsrs	r3, r3, #9
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	60fa      	str	r2, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c54:	e026      	b.n	8009ca4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ea      	bne.n	8009c46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e00e      	b.n	8009ca4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e003      	b.n	8009ca4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a06      	ldr	r2, [pc, #24]	; (8009cb8 <SDMMC_GetCmdResp2+0x90>)
 8009ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	24000000 	.word	0x24000000
 8009cb4:	10624dd3 	.word	0x10624dd3
 8009cb8:	002000c5 	.word	0x002000c5

08009cbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <SDMMC_GetCmdResp3+0x74>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1a      	ldr	r2, [pc, #104]	; (8009d34 <SDMMC_GetCmdResp3+0x78>)
 8009cca:	fba2 2303 	umull	r2, r3, r2, r3
 8009cce:	0a5b      	lsrs	r3, r3, #9
 8009cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd4:	fb02 f303 	mul.w	r3, r2, r3
 8009cd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1e5a      	subs	r2, r3, #1
 8009cde:	60fa      	str	r2, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce8:	e01b      	b.n	8009d22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1ea      	bne.n	8009cda <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2204      	movs	r2, #4
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d16:	2304      	movs	r3, #4
 8009d18:	e003      	b.n	8009d22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a06      	ldr	r2, [pc, #24]	; (8009d38 <SDMMC_GetCmdResp3+0x7c>)
 8009d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	24000000 	.word	0x24000000
 8009d34:	10624dd3 	.word	0x10624dd3
 8009d38:	002000c5 	.word	0x002000c5

08009d3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	460b      	mov	r3, r1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d4a:	4b35      	ldr	r3, [pc, #212]	; (8009e20 <SDMMC_GetCmdResp6+0xe4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a35      	ldr	r2, [pc, #212]	; (8009e24 <SDMMC_GetCmdResp6+0xe8>)
 8009d50:	fba2 2303 	umull	r2, r3, r2, r3
 8009d54:	0a5b      	lsrs	r3, r3, #9
 8009d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5a:	fb02 f303 	mul.w	r3, r2, r3
 8009d5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	1e5a      	subs	r2, r3, #1
 8009d64:	61fa      	str	r2, [r7, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d6e:	e052      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0ef      	beq.n	8009d60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1ea      	bne.n	8009d60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2204      	movs	r2, #4
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	e03a      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2201      	movs	r2, #1
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e02f      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff fc46 	bl	8009648 <SDMMC_GetCommandResponse>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d001      	beq.n	8009dca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e025      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <SDMMC_GetCmdResp6+0xec>)
 8009dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7ff fc45 	bl	8009662 <SDMMC_GetResponse>
 8009dd8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d106      	bne.n	8009df2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	0c1b      	lsrs	r3, r3, #16
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	e011      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e00:	e009      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e10:	e001      	b.n	8009e16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	24000000 	.word	0x24000000
 8009e24:	10624dd3 	.word	0x10624dd3
 8009e28:	002000c5 	.word	0x002000c5

08009e2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e34:	4b22      	ldr	r3, [pc, #136]	; (8009ec0 <SDMMC_GetCmdResp7+0x94>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a22      	ldr	r2, [pc, #136]	; (8009ec4 <SDMMC_GetCmdResp7+0x98>)
 8009e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3e:	0a5b      	lsrs	r3, r3, #9
 8009e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e44:	fb02 f303 	mul.w	r3, r2, r3
 8009e48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1e5a      	subs	r2, r3, #1
 8009e4e:	60fa      	str	r2, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d102      	bne.n	8009e5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e58:	e02c      	b.n	8009eb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0ef      	beq.n	8009e4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1ea      	bne.n	8009e4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2204      	movs	r2, #4
 8009e84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e86:	2304      	movs	r3, #4
 8009e88:	e014      	b.n	8009eb4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e009      	b.n	8009eb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2240      	movs	r2, #64	; 0x40
 8009eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009eb2:	2300      	movs	r3, #0

}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	24000000 	.word	0x24000000
 8009ec4:	10624dd3 	.word	0x10624dd3

08009ec8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ed0:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <SDMMC_GetCmdError+0x50>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <SDMMC_GetCmdError+0x54>)
 8009ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eda:	0a5b      	lsrs	r3, r3, #9
 8009edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee0:	fb02 f303 	mul.w	r3, r2, r3
 8009ee4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	1e5a      	subs	r2, r3, #1
 8009eea:	60fa      	str	r2, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ef0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ef4:	e009      	b.n	8009f0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0f1      	beq.n	8009ee6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a06      	ldr	r2, [pc, #24]	; (8009f20 <SDMMC_GetCmdError+0x58>)
 8009f06:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	24000000 	.word	0x24000000
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	002000c5 	.word	0x002000c5

08009f24 <memset>:
 8009f24:	4402      	add	r2, r0
 8009f26:	4603      	mov	r3, r0
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d100      	bne.n	8009f2e <memset+0xa>
 8009f2c:	4770      	bx	lr
 8009f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f32:	e7f9      	b.n	8009f28 <memset+0x4>

08009f34 <__libc_init_array>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4d0d      	ldr	r5, [pc, #52]	; (8009f6c <__libc_init_array+0x38>)
 8009f38:	4c0d      	ldr	r4, [pc, #52]	; (8009f70 <__libc_init_array+0x3c>)
 8009f3a:	1b64      	subs	r4, r4, r5
 8009f3c:	10a4      	asrs	r4, r4, #2
 8009f3e:	2600      	movs	r6, #0
 8009f40:	42a6      	cmp	r6, r4
 8009f42:	d109      	bne.n	8009f58 <__libc_init_array+0x24>
 8009f44:	4d0b      	ldr	r5, [pc, #44]	; (8009f74 <__libc_init_array+0x40>)
 8009f46:	4c0c      	ldr	r4, [pc, #48]	; (8009f78 <__libc_init_array+0x44>)
 8009f48:	f000 f826 	bl	8009f98 <_init>
 8009f4c:	1b64      	subs	r4, r4, r5
 8009f4e:	10a4      	asrs	r4, r4, #2
 8009f50:	2600      	movs	r6, #0
 8009f52:	42a6      	cmp	r6, r4
 8009f54:	d105      	bne.n	8009f62 <__libc_init_array+0x2e>
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f5c:	4798      	blx	r3
 8009f5e:	3601      	adds	r6, #1
 8009f60:	e7ee      	b.n	8009f40 <__libc_init_array+0xc>
 8009f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f66:	4798      	blx	r3
 8009f68:	3601      	adds	r6, #1
 8009f6a:	e7f2      	b.n	8009f52 <__libc_init_array+0x1e>
 8009f6c:	0800a03c 	.word	0x0800a03c
 8009f70:	0800a03c 	.word	0x0800a03c
 8009f74:	0800a03c 	.word	0x0800a03c
 8009f78:	0800a040 	.word	0x0800a040

08009f7c <memcpy>:
 8009f7c:	440a      	add	r2, r1
 8009f7e:	4291      	cmp	r1, r2
 8009f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f84:	d100      	bne.n	8009f88 <memcpy+0xc>
 8009f86:	4770      	bx	lr
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f92:	4291      	cmp	r1, r2
 8009f94:	d1f9      	bne.n	8009f8a <memcpy+0xe>
 8009f96:	bd10      	pop	{r4, pc}

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
